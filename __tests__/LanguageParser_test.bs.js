// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var LanguageLexer = require("../src/LanguageLexer.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var LanguageParser = require("../src/LanguageParser.bs.js");

Jest.describe("LanguageParser", (function (param) {
        var expectParse = function (str, lang) {
          return Jest.test("'" + (str + "'"), (function (param) {
                        return Jest.Expect[/* toEqual */12](lang, Jest.Expect[/* expect */0](LanguageParser.language_def(LanguageLexer.read, Lexing.from_string(str))));
                      }));
        };
        expectParse("bool := true() | false()", /* Language */[Belt_MapString.fromArray(/* array */[/* tuple */[
                      "bool",
                      /* SortDef */[
                        /* [] */0,
                        /* :: */[
                          /* OperatorDef */[
                            "true",
                            /* Arity */[
                              /* [] */0,
                              /* [] */0
                            ]
                          ],
                          /* :: */[
                            /* OperatorDef */[
                              "false",
                              /* Arity */[
                                /* [] */0,
                                /* [] */0
                              ]
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]])]);
        var tm_sort_001 = /* array */[];
        var tm_sort = /* SortAp */[
          "tm",
          tm_sort_001
        ];
        var tm_valence = /* FixedValence */Block.__(0, [
            /* [] */0,
            tm_sort
          ]);
        var ty_sort_001 = /* array */[];
        var ty_sort = /* SortAp */[
          "ty",
          ty_sort_001
        ];
        var ty_valence = /* FixedValence */Block.__(0, [
            /* [] */0,
            ty_sort
          ]);
        return expectParse("\n  ty :=\n    | bool()\n    | arr(ty(); ty())\n\n  tm :=\n    | app(tm(); tm())\n    | lam(tm(). tm())\n  ", /* Language */[Belt_MapString.fromArray(/* array */[
                          /* tuple */[
                            "ty",
                            /* SortDef */[
                              /* [] */0,
                              /* :: */[
                                /* OperatorDef */[
                                  "bool",
                                  /* Arity */[
                                    /* [] */0,
                                    /* [] */0
                                  ]
                                ],
                                /* :: */[
                                  /* OperatorDef */[
                                    "arr",
                                    /* Arity */[
                                      /* [] */0,
                                      /* :: */[
                                        ty_valence,
                                        /* :: */[
                                          ty_valence,
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ],
                          /* tuple */[
                            "tm",
                            /* SortDef */[
                              /* [] */0,
                              /* :: */[
                                /* OperatorDef */[
                                  "app",
                                  /* Arity */[
                                    /* [] */0,
                                    /* :: */[
                                      tm_valence,
                                      /* :: */[
                                        tm_valence,
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ],
                                /* :: */[
                                  /* OperatorDef */[
                                    "lam",
                                    /* Arity */[
                                      /* [] */0,
                                      /* :: */[
                                        /* FixedValence */Block.__(0, [
                                            /* :: */[
                                              tm_sort,
                                              /* [] */0
                                            ],
                                            tm_sort
                                          ]),
                                        /* [] */0
                                      ]
                                    ]
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ])]);
      }));

/*  Not a pure module */
