// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Parsing = require("../src/Parsing.bs.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");

Jest.describe("TermParser", (function (param) {
        var P_dyn = Parsing.Incremental(Parsing.Parseable_dynamics);
        var expectParse = function (str, tm) {
          return Jest.test("'" + (str + "'"), (function (param) {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [tm]), Jest.Expect[/* expect */0](Curry._1(P_dyn[/* parse */5], str)));
                      }));
        };
        var expected = /* DenotationChart */[/* :: */[
            /* tuple */[
              /* DPatternTm */Block.__(0, [
                  "true",
                  /* [] */0
                ]),
              /* Operator */Block.__(0, [
                  "true",
                  /* [] */0
                ])
            ],
            /* :: */[
              /* tuple */[
                /* DPatternTm */Block.__(0, [
                    "false",
                    /* [] */0
                  ]),
                /* Operator */Block.__(0, [
                    "false",
                    /* [] */0
                  ])
              ],
              /* :: */[
                /* tuple */[
                  /* DPatternTm */Block.__(0, [
                      "val",
                      /* :: */[
                        /* DenotationScopePat */[
                          /* [] */0,
                          /* DVar */Block.__(1, ["v"])
                        ],
                        /* [] */0
                      ]
                    ]),
                  /* Metavar */Block.__(7, ["v"])
                ],
                /* :: */[
                  /* tuple */[
                    /* DPatternTm */Block.__(0, [
                        "annot",
                        /* :: */[
                          /* DenotationScopePat */[
                            /* [] */0,
                            /* DVar */Block.__(1, ["tm"])
                          ],
                          /* :: */[
                            /* DenotationScopePat */[
                              /* [] */0,
                              /* DVar */Block.__(1, ["ty"])
                            ],
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* Meaning */Block.__(8, ["tm"])
                  ],
                  /* :: */[
                    /* tuple */[
                      /* DPatternTm */Block.__(0, [
                          "app",
                          /* :: */[
                            /* DenotationScopePat */[
                              /* [] */0,
                              /* DVar */Block.__(1, ["fun"])
                            ],
                            /* :: */[
                              /* DenotationScopePat */[
                                /* [] */0,
                                /* DVar */Block.__(1, ["arg"])
                              ],
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* CoreApp */Block.__(5, [
                          /* Meaning */Block.__(8, ["fun"]),
                          /* :: */[
                            /* Meaning */Block.__(8, ["arg"]),
                            /* [] */0
                          ]
                        ])
                    ],
                    /* :: */[
                      /* tuple */[
                        /* DPatternTm */Block.__(0, [
                            "ite",
                            /* :: */[
                              /* DenotationScopePat */[
                                /* [] */0,
                                /* DVar */Block.__(1, ["t1"])
                              ],
                              /* :: */[
                                /* DenotationScopePat */[
                                  /* [] */0,
                                  /* DVar */Block.__(1, ["t2"])
                                ],
                                /* :: */[
                                  /* DenotationScopePat */[
                                    /* [] */0,
                                    /* DVar */Block.__(1, ["t3"])
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                        /* Case */Block.__(6, [
                            /* Meaning */Block.__(8, ["t1"]),
                            /* :: */[
                              /* tuple */[
                                /* PatternTerm */Block.__(0, [
                                    "true",
                                    /* [] */0
                                  ]),
                                /* CoreScope */[
                                  /* [] */0,
                                  /* Meaning */Block.__(8, ["t2"])
                                ]
                              ],
                              /* :: */[
                                /* tuple */[
                                  /* PatternTerm */Block.__(0, [
                                      "false",
                                      /* [] */0
                                    ]),
                                  /* CoreScope */[
                                    /* [] */0,
                                    /* Meaning */Block.__(8, ["t3"])
                                  ]
                                ],
                                /* [] */0
                              ]
                            ]
                          ])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]];
        expectParse("\n[[ true()          ]] = true()\n[[ false()         ]] = false()\n[[ val(v)          ]] = v\n[[ annot(tm; ty)   ]] = [[ tm ]]\n[[ ite(t1; t2; t3) ]] = case [[ t1 ]] of {\n  | true()  -> [[ t2 ]]\n  | false() -> [[ t3 ]]\n}\n  ", expected);
        var metavar_test = Belt_Result.getExn(Curry._1(P_dyn[/* parse */5], "[[ lit(v) ]] = v"));
        var metavar_test_expected = /* DenotationChart */[/* :: */[
            /* tuple */[
              /* DPatternTm */Block.__(0, [
                  "lit",
                  /* :: */[
                    /* DenotationScopePat */[
                      /* [] */0,
                      /* DVar */Block.__(1, ["v"])
                    ],
                    /* [] */0
                  ]
                ]),
              /* Metavar */Block.__(7, ["v"])
            ],
            /* [] */0
          ]];
        return Jest.test("metavar fixing-up", (function (param) {
                      return Jest.Expect[/* toEqual */12](metavar_test_expected, Jest.Expect[/* expect */0](metavar_test));
                    }));
      }));

/*  Not a pure module */
