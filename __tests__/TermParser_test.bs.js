// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Bigint = require("bs-zarith/src/Bigint.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var TermLexer = require("../src/TermLexer.bs.js");
var TermParser = require("../src/TermParser.bs.js");

Jest.describe("TermParser", (function (param) {
        var expectParse = function (str, tm) {
          return Jest.test("'" + (str + "'"), (function (param) {
                        var exit = 0;
                        var tm$prime;
                        try {
                          tm$prime = TermParser.top_term(TermLexer.read, Lexing.from_string(str));
                          exit = 1;
                        }
                        catch (_except){
                          return Jest.fail("'" + (str + "' triggered an exception"));
                        }
                        if (exit === 1) {
                          return Jest.Expect[/* toEqual */12](tm, Jest.Expect[/* expect */0](tm$prime));
                        }
                        
                      }));
        };
        expectParse("[x]", /* Sequence */Block.__(2, [/* :: */[
                  /* Var */Block.__(1, ["x"]),
                  /* [] */0
                ]]));
        expectParse("x", /* Var */Block.__(1, ["x"]));
        expectParse("123", /* Primitive */Block.__(3, [/* PrimInteger */Block.__(0, [Bigint.of_int(123)])]));
        expectParse("\"abc\"", /* Primitive */Block.__(3, [/* PrimString */Block.__(1, ["abc"])]));
        return expectParse("lam(x. x)", /* Operator */Block.__(0, [
                      "lam",
                      /* :: */[
                        /* Scope */[
                          /* :: */[
                            "x",
                            /* [] */0
                          ],
                          /* Var */Block.__(1, ["x"])
                        ],
                        /* [] */0
                      ]
                    ]));
      }));

/*  Not a pure module */
