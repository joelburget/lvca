// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Util = require("../src/Util.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var LrParsing = require("../src/LrParsing.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Belt_MutableSet = require("bs-platform/lib/js/belt_MutableSet.js");
var Belt_MutableQueue = require("bs-platform/lib/js/belt_MutableQueue.js");

var grammar_000 = /* nonterminals */Belt_MapInt.fromArray(/* array */[
      /* tuple */[
        0,
        /* record */[/* productions : :: */[
            /* :: */[
              /* Nonterminal */Block.__(1, [1]),
              /* [] */0
            ],
            /* [] */0
          ]]
      ],
      /* tuple */[
        1,
        /* record */[/* productions : :: */[
            /* :: */[
              /* Nonterminal */Block.__(1, [1]),
              /* :: */[
                /* Terminal */Block.__(0, [1]),
                /* :: */[
                  /* Nonterminal */Block.__(1, [2]),
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Nonterminal */Block.__(1, [2]),
                /* [] */0
              ],
              /* [] */0
            ]
          ]]
      ],
      /* tuple */[
        2,
        /* record */[/* productions : :: */[
            /* :: */[
              /* Nonterminal */Block.__(1, [2]),
              /* :: */[
                /* Terminal */Block.__(0, [2]),
                /* :: */[
                  /* Nonterminal */Block.__(1, [3]),
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Nonterminal */Block.__(1, [3]),
                /* [] */0
              ],
              /* [] */0
            ]
          ]]
      ],
      /* tuple */[
        3,
        /* record */[/* productions : :: */[
            /* :: */[
              /* Terminal */Block.__(0, [3]),
              /* :: */[
                /* Nonterminal */Block.__(1, [1]),
                /* :: */[
                  /* Terminal */Block.__(0, [4]),
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Terminal */Block.__(0, [5]),
                /* [] */0
              ],
              /* [] */0
            ]
          ]]
      ]
    ]);

var grammar_002 = /* terminal_names */Belt_MapString.fromArray(/* array */[
      /* tuple */[
        "$",
        0
      ],
      /* tuple */[
        "+",
        1
      ],
      /* tuple */[
        "*",
        2
      ],
      /* tuple */[
        "(",
        3
      ],
      /* tuple */[
        ")",
        4
      ],
      /* tuple */[
        "id",
        5
      ]
    ]);

var grammar_003 = /* nonterminal_names */Belt_MapString.fromArray(/* array */[
      /* tuple */[
        "E'",
        0
      ],
      /* tuple */[
        "E",
        1
      ],
      /* tuple */[
        "T",
        2
      ],
      /* tuple */[
        "F",
        3
      ]
    ]);

var grammar = /* record */[
  grammar_000,
  /* num_terminals */6,
  grammar_002,
  grammar_003
];

var Grammar = /* module */[/* grammar */grammar];

Jest.describe("LrParsing", (function (param) {
        var Lr0$prime = LrParsing.Lr0(Grammar);
        Jest.testAll("mk_item / view_item", /* :: */[
              Jest.Expect[/* toEqual */12](/* record */[
                    /* production_num */0,
                    /* position */0
                  ], Jest.Expect[/* expect */0](LrParsing.view_item(LrParsing.mk_item$prime(0, 0)))),
              /* :: */[
                Jest.Expect[/* toEqual */12](/* record */[
                      /* production_num */0,
                      /* position */1
                    ], Jest.Expect[/* expect */0](LrParsing.view_item(LrParsing.mk_item$prime(0, 1)))),
                /* :: */[
                  Jest.Expect[/* toEqual */12](/* record */[
                        /* production_num */1,
                        /* position */0
                      ], Jest.Expect[/* expect */0](LrParsing.view_item(LrParsing.mk_item$prime(1, 0)))),
                  /* :: */[
                    Jest.Expect[/* toEqual */12](/* record */[
                          /* production_num */1,
                          /* position */1
                        ], Jest.Expect[/* expect */0](LrParsing.view_item(LrParsing.mk_item$prime(1, 1)))),
                    /* [] */0
                  ]
                ]
              ]
            ], Util.id);
        Jest.testAll("in_first", /* :: */[
              Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_first */19], 1, /* Terminal */Block.__(0, [1])))),
              /* :: */[
                Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_first */19], 0, /* Nonterminal */Block.__(1, [0])))),
                /* :: */[
                  Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_first */19], 1, /* Nonterminal */Block.__(1, [0])))),
                  /* :: */[
                    Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_first */19], 2, /* Nonterminal */Block.__(1, [0])))),
                    /* :: */[
                      Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_first */19], 3, /* Nonterminal */Block.__(1, [0])))),
                      /* :: */[
                        Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_first */19], 4, /* Nonterminal */Block.__(1, [0])))),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ], Util.id);
        Jest.testAll("in_follow", /* :: */[
              Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 0, 0))),
              /* :: */[
                Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 1, 0))),
                /* :: */[
                  Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 2, 0))),
                  /* :: */[
                    Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 3, 0))),
                    /* :: */[
                      Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 4, 0))),
                      /* :: */[
                        Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 0, 1))),
                        /* :: */[
                          Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 1, 1))),
                          /* :: */[
                            Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 2, 1))),
                            /* :: */[
                              Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 3, 1))),
                              /* :: */[
                                Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 4, 1))),
                                /* :: */[
                                  Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 0, 2))),
                                  /* :: */[
                                    Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 1, 2))),
                                    /* :: */[
                                      Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 2, 2))),
                                      /* :: */[
                                        Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 3, 2))),
                                        /* :: */[
                                          Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 4, 2))),
                                          /* :: */[
                                            Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 0, 3))),
                                            /* :: */[
                                              Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 1, 3))),
                                              /* :: */[
                                                Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 2, 3))),
                                                /* :: */[
                                                  Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 3, 3))),
                                                  /* :: */[
                                                    Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* in_follow */25], 4, 3))),
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ], Util.id);
        var items0 = /* array */[LrParsing.mk_item$prime(0, 0)];
        var expected0_000 = /* kernel_items */Belt_SetInt.fromArray(items0);
        var expected0_001 = /* nonkernel_items */Belt_SetInt.fromArray(/* array */[
              LrParsing.mk_item$prime(1, 0),
              LrParsing.mk_item$prime(2, 0),
              LrParsing.mk_item$prime(3, 0),
              LrParsing.mk_item$prime(4, 0),
              LrParsing.mk_item$prime(5, 0),
              LrParsing.mk_item$prime(6, 0)
            ]);
        var expected0 = /* record */[
          expected0_000,
          expected0_001
        ];
        var items1 = /* array */[
          LrParsing.mk_item$prime(0, 1),
          LrParsing.mk_item$prime(1, 1)
        ];
        var expected1_000 = /* kernel_items */Belt_SetInt.fromArray(items1);
        var expected1_001 = /* nonkernel_items */Belt_SetInt.fromArray(/* array */[]);
        var expected1 = /* record */[
          expected1_000,
          expected1_001
        ];
        var items7 = /* array */[LrParsing.mk_item$prime(3, 2)];
        var expected7_000 = /* kernel_items */Belt_SetInt.fromArray(items7);
        var expected7_001 = /* nonkernel_items */Belt_SetInt.fromArray(/* array */[
              LrParsing.mk_item$prime(5, 0),
              LrParsing.mk_item$prime(6, 0)
            ]);
        var expected7 = /* record */[
          expected7_000,
          expected7_001
        ];
        Jest.testAll("closure", /* :: */[
              Jest.Expect[/* toEqual */12](expected0, Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* closure */7], Belt_SetInt.fromArray(items0)))),
              /* :: */[
                Jest.Expect[/* toEqual */12](expected1, Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* closure */7], Belt_SetInt.fromArray(items1)))),
                /* :: */[
                  Jest.Expect[/* toEqual */12](expected7, Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* closure */7], Belt_SetInt.fromArray(items7)))),
                  /* [] */0
                ]
              ]
            ], Util.id);
        var goto_kernel = Belt_SetInt.fromArray(/* array */[LrParsing.mk_item$prime(1, 2)]);
        var goto_nonkernel = Belt_SetInt.fromArray(/* array */[
              LrParsing.mk_item$prime(3, 0),
              LrParsing.mk_item$prime(4, 0),
              LrParsing.mk_item$prime(5, 0),
              LrParsing.mk_item$prime(6, 0)
            ]);
        Jest.testAll("goto", /* :: */[
              Jest.Expect[/* toEqual */12](goto_kernel, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_kernel */10], Belt_SetInt.fromArray(items1), /* Terminal */Block.__(0, [1])))),
              /* :: */[
                Jest.Expect[/* toEqual */12](/* record */[
                      /* kernel_items */goto_kernel,
                      /* nonkernel_items */goto_nonkernel
                    ], Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto */11], Belt_SetInt.fromArray(items1), /* Terminal */Block.__(0, [1])))),
                /* [] */0
              ]
            ], Util.id);
        var item_sets = /* array */[
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(0, 0),
                LrParsing.mk_item$prime(1, 0),
                LrParsing.mk_item$prime(2, 0),
                LrParsing.mk_item$prime(3, 0),
                LrParsing.mk_item$prime(4, 0),
                LrParsing.mk_item$prime(5, 0),
                LrParsing.mk_item$prime(6, 0)
              ]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(0, 1),
                LrParsing.mk_item$prime(1, 1)
              ]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(2, 1),
                LrParsing.mk_item$prime(3, 1)
              ]),
          Belt_SetInt.fromArray(/* array */[LrParsing.mk_item$prime(4, 1)]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(5, 1),
                LrParsing.mk_item$prime(1, 0),
                LrParsing.mk_item$prime(2, 0),
                LrParsing.mk_item$prime(3, 0),
                LrParsing.mk_item$prime(4, 0),
                LrParsing.mk_item$prime(5, 0),
                LrParsing.mk_item$prime(6, 0)
              ]),
          Belt_SetInt.fromArray(/* array */[LrParsing.mk_item$prime(6, 1)]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(1, 2),
                LrParsing.mk_item$prime(3, 0),
                LrParsing.mk_item$prime(4, 0),
                LrParsing.mk_item$prime(5, 0),
                LrParsing.mk_item$prime(6, 0)
              ]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(3, 2),
                LrParsing.mk_item$prime(5, 0),
                LrParsing.mk_item$prime(6, 0)
              ]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(1, 1),
                LrParsing.mk_item$prime(5, 2)
              ]),
          Belt_SetInt.fromArray(/* array */[
                LrParsing.mk_item$prime(1, 3),
                LrParsing.mk_item$prime(3, 1)
              ]),
          Belt_SetInt.fromArray(/* array */[LrParsing.mk_item$prime(3, 3)]),
          Belt_SetInt.fromArray(/* array */[LrParsing.mk_item$prime(5, 3)])
        ];
        var expected_item_sets = Belt_MutableSet.fromArray(item_sets, LrParsing.ComparableSet);
        var normalize = function (items) {
          return Belt_List.map(Belt_MutableSet.toList(items), Belt_SetInt.toList);
        };
        Jest.testAll("items", /* :: */[
              Jest.Expect[/* toEqual */12](normalize(expected_item_sets), Jest.Expect[/* expect */0](normalize(Lr0$prime[/* items */13]))),
              /* [] */0
            ], Util.id);
        var state = Belt_Array.map(item_sets, Lr0$prime[/* item_set_to_state */16]);
        Jest.testAll("goto_table", /* :: */[
              Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 1), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 0), /* Nonterminal */Block.__(1, [1])))),
              /* :: */[
                Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 2), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 0), /* Nonterminal */Block.__(1, [2])))),
                /* :: */[
                  Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 3), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 0), /* Nonterminal */Block.__(1, [3])))),
                  /* :: */[
                    Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 8), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 4), /* Nonterminal */Block.__(1, [1])))),
                    /* :: */[
                      Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 2), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 4), /* Nonterminal */Block.__(1, [2])))),
                      /* :: */[
                        Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 3), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 4), /* Nonterminal */Block.__(1, [3])))),
                        /* :: */[
                          Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 6), /* Nonterminal */Block.__(1, [1])))),
                          /* :: */[
                            Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 9), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 6), /* Nonterminal */Block.__(1, [2])))),
                            /* :: */[
                              Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 3), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 6), /* Nonterminal */Block.__(1, [3])))),
                              /* :: */[
                                Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 7), /* Nonterminal */Block.__(1, [1])))),
                                /* :: */[
                                  Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 7), /* Nonterminal */Block.__(1, [2])))),
                                  /* :: */[
                                    Jest.Expect[/* toEqual */12](Caml_array.caml_array_get(state, 10), Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* goto_table */26], Caml_array.caml_array_get(state, 7), /* Nonterminal */Block.__(1, [3])))),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ], Util.id);
        var action_table_tests_000 = /* tuple */[
          0,
          5,
          /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 5)])
        ];
        var action_table_tests_001 = /* :: */[
          /* tuple */[
            0,
            1,
            /* Error */1
          ],
          /* :: */[
            /* tuple */[
              0,
              2,
              /* Error */1
            ],
            /* :: */[
              /* tuple */[
                0,
                3,
                /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 4)])
              ],
              /* :: */[
                /* tuple */[
                  0,
                  4,
                  /* Error */1
                ],
                /* :: */[
                  /* tuple */[
                    0,
                    0,
                    /* Error */1
                  ],
                  /* :: */[
                    /* tuple */[
                      1,
                      5,
                      /* Error */1
                    ],
                    /* :: */[
                      /* tuple */[
                        1,
                        1,
                        /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 6)])
                      ],
                      /* :: */[
                        /* tuple */[
                          1,
                          2,
                          /* Error */1
                        ],
                        /* :: */[
                          /* tuple */[
                            1,
                            3,
                            /* Error */1
                          ],
                          /* :: */[
                            /* tuple */[
                              1,
                              4,
                              /* Error */1
                            ],
                            /* :: */[
                              /* tuple */[
                                1,
                                0,
                                /* Accept */0
                              ],
                              /* :: */[
                                /* tuple */[
                                  2,
                                  5,
                                  /* Error */1
                                ],
                                /* :: */[
                                  /* tuple */[
                                    2,
                                    1,
                                    /* Reduce */Block.__(1, [2])
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      2,
                                      2,
                                      /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 7)])
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        2,
                                        3,
                                        /* Error */1
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          2,
                                          4,
                                          /* Reduce */Block.__(1, [2])
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            2,
                                            0,
                                            /* Reduce */Block.__(1, [2])
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              3,
                                              5,
                                              /* Error */1
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                3,
                                                1,
                                                /* Reduce */Block.__(1, [4])
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  3,
                                                  2,
                                                  /* Reduce */Block.__(1, [4])
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    3,
                                                    3,
                                                    /* Error */1
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      3,
                                                      4,
                                                      /* Reduce */Block.__(1, [4])
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        3,
                                                        0,
                                                        /* Reduce */Block.__(1, [4])
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          4,
                                                          5,
                                                          /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 5)])
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            4,
                                                            1,
                                                            /* Error */1
                                                          ],
                                                          /* :: */[
                                                            /* tuple */[
                                                              4,
                                                              2,
                                                              /* Error */1
                                                            ],
                                                            /* :: */[
                                                              /* tuple */[
                                                                4,
                                                                3,
                                                                /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 4)])
                                                              ],
                                                              /* :: */[
                                                                /* tuple */[
                                                                  4,
                                                                  4,
                                                                  /* Error */1
                                                                ],
                                                                /* :: */[
                                                                  /* tuple */[
                                                                    4,
                                                                    0,
                                                                    /* Error */1
                                                                  ],
                                                                  /* :: */[
                                                                    /* tuple */[
                                                                      5,
                                                                      5,
                                                                      /* Error */1
                                                                    ],
                                                                    /* :: */[
                                                                      /* tuple */[
                                                                        5,
                                                                        1,
                                                                        /* Reduce */Block.__(1, [6])
                                                                      ],
                                                                      /* :: */[
                                                                        /* tuple */[
                                                                          5,
                                                                          2,
                                                                          /* Reduce */Block.__(1, [6])
                                                                        ],
                                                                        /* :: */[
                                                                          /* tuple */[
                                                                            5,
                                                                            3,
                                                                            /* Error */1
                                                                          ],
                                                                          /* :: */[
                                                                            /* tuple */[
                                                                              5,
                                                                              4,
                                                                              /* Reduce */Block.__(1, [6])
                                                                            ],
                                                                            /* :: */[
                                                                              /* tuple */[
                                                                                5,
                                                                                0,
                                                                                /* Reduce */Block.__(1, [6])
                                                                              ],
                                                                              /* :: */[
                                                                                /* tuple */[
                                                                                  6,
                                                                                  5,
                                                                                  /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 5)])
                                                                                ],
                                                                                /* :: */[
                                                                                  /* tuple */[
                                                                                    6,
                                                                                    1,
                                                                                    /* Error */1
                                                                                  ],
                                                                                  /* :: */[
                                                                                    /* tuple */[
                                                                                      6,
                                                                                      2,
                                                                                      /* Error */1
                                                                                    ],
                                                                                    /* :: */[
                                                                                      /* tuple */[
                                                                                        6,
                                                                                        3,
                                                                                        /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 4)])
                                                                                      ],
                                                                                      /* :: */[
                                                                                        /* tuple */[
                                                                                          6,
                                                                                          4,
                                                                                          /* Error */1
                                                                                        ],
                                                                                        /* :: */[
                                                                                          /* tuple */[
                                                                                            6,
                                                                                            0,
                                                                                            /* Error */1
                                                                                          ],
                                                                                          /* :: */[
                                                                                            /* tuple */[
                                                                                              7,
                                                                                              5,
                                                                                              /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 5)])
                                                                                            ],
                                                                                            /* :: */[
                                                                                              /* tuple */[
                                                                                                7,
                                                                                                1,
                                                                                                /* Error */1
                                                                                              ],
                                                                                              /* :: */[
                                                                                                /* tuple */[
                                                                                                  7,
                                                                                                  2,
                                                                                                  /* Error */1
                                                                                                ],
                                                                                                /* :: */[
                                                                                                  /* tuple */[
                                                                                                    7,
                                                                                                    3,
                                                                                                    /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 4)])
                                                                                                  ],
                                                                                                  /* :: */[
                                                                                                    /* tuple */[
                                                                                                      7,
                                                                                                      4,
                                                                                                      /* Error */1
                                                                                                    ],
                                                                                                    /* :: */[
                                                                                                      /* tuple */[
                                                                                                        7,
                                                                                                        0,
                                                                                                        /* Error */1
                                                                                                      ],
                                                                                                      /* :: */[
                                                                                                        /* tuple */[
                                                                                                          8,
                                                                                                          5,
                                                                                                          /* Error */1
                                                                                                        ],
                                                                                                        /* :: */[
                                                                                                          /* tuple */[
                                                                                                            8,
                                                                                                            1,
                                                                                                            /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 6)])
                                                                                                          ],
                                                                                                          /* :: */[
                                                                                                            /* tuple */[
                                                                                                              8,
                                                                                                              2,
                                                                                                              /* Error */1
                                                                                                            ],
                                                                                                            /* :: */[
                                                                                                              /* tuple */[
                                                                                                                8,
                                                                                                                3,
                                                                                                                /* Error */1
                                                                                                              ],
                                                                                                              /* :: */[
                                                                                                                /* tuple */[
                                                                                                                  8,
                                                                                                                  4,
                                                                                                                  /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 11)])
                                                                                                                ],
                                                                                                                /* :: */[
                                                                                                                  /* tuple */[
                                                                                                                    8,
                                                                                                                    0,
                                                                                                                    /* Error */1
                                                                                                                  ],
                                                                                                                  /* :: */[
                                                                                                                    /* tuple */[
                                                                                                                      9,
                                                                                                                      5,
                                                                                                                      /* Error */1
                                                                                                                    ],
                                                                                                                    /* :: */[
                                                                                                                      /* tuple */[
                                                                                                                        9,
                                                                                                                        1,
                                                                                                                        /* Reduce */Block.__(1, [1])
                                                                                                                      ],
                                                                                                                      /* :: */[
                                                                                                                        /* tuple */[
                                                                                                                          9,
                                                                                                                          2,
                                                                                                                          /* Shift */Block.__(0, [Caml_array.caml_array_get(state, 7)])
                                                                                                                        ],
                                                                                                                        /* :: */[
                                                                                                                          /* tuple */[
                                                                                                                            9,
                                                                                                                            3,
                                                                                                                            /* Error */1
                                                                                                                          ],
                                                                                                                          /* :: */[
                                                                                                                            /* tuple */[
                                                                                                                              9,
                                                                                                                              4,
                                                                                                                              /* Reduce */Block.__(1, [1])
                                                                                                                            ],
                                                                                                                            /* :: */[
                                                                                                                              /* tuple */[
                                                                                                                                9,
                                                                                                                                0,
                                                                                                                                /* Reduce */Block.__(1, [1])
                                                                                                                              ],
                                                                                                                              /* :: */[
                                                                                                                                /* tuple */[
                                                                                                                                  10,
                                                                                                                                  5,
                                                                                                                                  /* Error */1
                                                                                                                                ],
                                                                                                                                /* :: */[
                                                                                                                                  /* tuple */[
                                                                                                                                    10,
                                                                                                                                    1,
                                                                                                                                    /* Reduce */Block.__(1, [3])
                                                                                                                                  ],
                                                                                                                                  /* :: */[
                                                                                                                                    /* tuple */[
                                                                                                                                      10,
                                                                                                                                      2,
                                                                                                                                      /* Reduce */Block.__(1, [3])
                                                                                                                                    ],
                                                                                                                                    /* :: */[
                                                                                                                                      /* tuple */[
                                                                                                                                        10,
                                                                                                                                        3,
                                                                                                                                        /* Error */1
                                                                                                                                      ],
                                                                                                                                      /* :: */[
                                                                                                                                        /* tuple */[
                                                                                                                                          10,
                                                                                                                                          4,
                                                                                                                                          /* Reduce */Block.__(1, [3])
                                                                                                                                        ],
                                                                                                                                        /* :: */[
                                                                                                                                          /* tuple */[
                                                                                                                                            10,
                                                                                                                                            0,
                                                                                                                                            /* Reduce */Block.__(1, [3])
                                                                                                                                          ],
                                                                                                                                          /* :: */[
                                                                                                                                            /* tuple */[
                                                                                                                                              11,
                                                                                                                                              5,
                                                                                                                                              /* Error */1
                                                                                                                                            ],
                                                                                                                                            /* :: */[
                                                                                                                                              /* tuple */[
                                                                                                                                                11,
                                                                                                                                                1,
                                                                                                                                                /* Reduce */Block.__(1, [5])
                                                                                                                                              ],
                                                                                                                                              /* :: */[
                                                                                                                                                /* tuple */[
                                                                                                                                                  11,
                                                                                                                                                  2,
                                                                                                                                                  /* Reduce */Block.__(1, [5])
                                                                                                                                                ],
                                                                                                                                                /* :: */[
                                                                                                                                                  /* tuple */[
                                                                                                                                                    11,
                                                                                                                                                    3,
                                                                                                                                                    /* Error */1
                                                                                                                                                  ],
                                                                                                                                                  /* :: */[
                                                                                                                                                    /* tuple */[
                                                                                                                                                      11,
                                                                                                                                                      4,
                                                                                                                                                      /* Reduce */Block.__(1, [5])
                                                                                                                                                    ],
                                                                                                                                                    /* :: */[
                                                                                                                                                      /* tuple */[
                                                                                                                                                        11,
                                                                                                                                                        0,
                                                                                                                                                        /* Reduce */Block.__(1, [5])
                                                                                                                                                      ],
                                                                                                                                                      /* [] */0
                                                                                                                                                    ]
                                                                                                                                                  ]
                                                                                                                                                ]
                                                                                                                                              ]
                                                                                                                                            ]
                                                                                                                                          ]
                                                                                                                                        ]
                                                                                                                                      ]
                                                                                                                                    ]
                                                                                                                                  ]
                                                                                                                                ]
                                                                                                                              ]
                                                                                                                            ]
                                                                                                                          ]
                                                                                                                        ]
                                                                                                                      ]
                                                                                                                    ]
                                                                                                                  ]
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ]
                                                                                                        ]
                                                                                                      ]
                                                                                                    ]
                                                                                                  ]
                                                                                                ]
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                            ]
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
        var action_table_tests = /* :: */[
          action_table_tests_000,
          action_table_tests_001
        ];
        var action_table_tests$prime = Belt_List.map(action_table_tests, (function (param) {
                return Jest.Expect[/* toEqual */12](param[2], Jest.Expect[/* expect */0](Curry._2(Lr0$prime[/* action_table */27], Caml_array.caml_array_get(state, param[0]), param[1])));
              }));
        Jest.testAll("action_table", action_table_tests$prime, Util.id);
        var mk_terminal = function (num, start_pos, end_pos) {
          return /* record */[
                  /* production : Left */Block.__(0, [num]),
                  /* children : [] */0,
                  /* start_pos */start_pos,
                  /* end_pos */end_pos
                ];
        };
        var mk_wrapper = function (prod_num, child) {
          return /* record */[
                  /* production : Right */Block.__(1, [prod_num]),
                  /* children : :: */[
                    child,
                    /* [] */0
                  ],
                  /* start_pos */child[/* start_pos */2],
                  /* end_pos */child[/* end_pos */3]
                ];
        };
        var tokens1 = Belt_MutableQueue.fromArray(/* array */[
              /* record */[
                /* name */"id",
                /* start */0,
                /* finish */3
              ],
              /* record */[
                /* name */"*",
                /* start */4,
                /* finish */5
              ],
              /* record */[
                /* name */"id",
                /* start */6,
                /* finish */9
              ],
              /* record */[
                /* name */"$",
                /* start */9,
                /* finish */9
              ]
            ]);
        var tokens2 = Belt_MutableQueue.fromArray(/* array */[
              /* record */[
                /* name */"id",
                /* start */0,
                /* finish */3
              ],
              /* record */[
                /* name */"*",
                /* start */4,
                /* finish */5
              ],
              /* record */[
                /* name */"id",
                /* start */6,
                /* finish */9
              ],
              /* record */[
                /* name */"+",
                /* start */10,
                /* finish */11
              ],
              /* record */[
                /* name */"id",
                /* start */12,
                /* finish */15
              ],
              /* record */[
                /* name */"$",
                /* start */15,
                /* finish */15
              ]
            ]);
        var tokens3 = Belt_MutableQueue.fromArray(/* array */[
              /* record */[
                /* name */"id",
                /* start */0,
                /* finish */3
              ],
              /* record */[
                /* name */"*",
                /* start */4,
                /* finish */5
              ]
            ]);
        var tokens4 = Belt_MutableQueue.fromArray(/* array */[
              /* record */[
                /* name */"id",
                /* start */0,
                /* finish */3
              ],
              /* record */[
                /* name */"+",
                /* start */4,
                /* finish */5
              ],
              /* record */[
                /* name */"id",
                /* start */6,
                /* finish */9
              ],
              /* record */[
                /* name */"$",
                /* start */9,
                /* finish */9
              ]
            ]);
        Jest.testAll("parse", /* :: */[
              Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [mk_wrapper(2, /* record */[
                            /* production : Right */Block.__(1, [3]),
                            /* children : :: */[
                              mk_wrapper(4, mk_wrapper(6, mk_terminal(5, 0, 3))),
                              /* :: */[
                                mk_terminal(2, 4, 5),
                                /* :: */[
                                  mk_wrapper(6, mk_terminal(5, 6, 9)),
                                  /* [] */0
                                ]
                              ]
                            ],
                            /* start_pos */0,
                            /* end_pos */9
                          ])]), Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* parse */35], tokens1))),
              /* :: */[
                Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* record */[
                          /* production : Right */Block.__(1, [1]),
                          /* children : :: */[
                            mk_wrapper(2, /* record */[
                                  /* production : Right */Block.__(1, [3]),
                                  /* children : :: */[
                                    mk_wrapper(4, mk_wrapper(6, mk_terminal(5, 0, 3))),
                                    /* :: */[
                                      mk_terminal(2, 4, 5),
                                      /* :: */[
                                        mk_wrapper(6, mk_terminal(5, 6, 9)),
                                        /* [] */0
                                      ]
                                    ]
                                  ],
                                  /* start_pos */0,
                                  /* end_pos */9
                                ]),
                            /* :: */[
                              mk_terminal(1, 10, 11),
                              /* :: */[
                                mk_wrapper(4, mk_wrapper(6, mk_terminal(5, 12, 15))),
                                /* [] */0
                              ]
                            ]
                          ],
                          /* start_pos */0,
                          /* end_pos */15
                        ]]), Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* parse */35], tokens2))),
                /* :: */[
                  Jest.Expect[/* toEqual */12](/* Error */Block.__(1, [/* tuple */[
                            4,
                            "parsing invariant violation -- pop failed"
                          ]]), Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* parse */35], tokens3))),
                  /* :: */[
                    Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* record */[
                              /* production : Right */Block.__(1, [1]),
                              /* children : :: */[
                                mk_wrapper(2, mk_wrapper(4, mk_wrapper(6, mk_terminal(5, 0, 3)))),
                                /* :: */[
                                  mk_terminal(1, 4, 5),
                                  /* :: */[
                                    mk_wrapper(4, mk_wrapper(6, mk_terminal(5, 6, 9))),
                                    /* [] */0
                                  ]
                                ]
                              ],
                              /* start_pos */0,
                              /* end_pos */9
                            ]]), Jest.Expect[/* expect */0](Curry._1(Lr0$prime[/* parse */35], tokens4))),
                    /* [] */0
                  ]
                ]
              ]
            ], Util.id);
        return Jest.test("lex-parse", (function (param) {
                      var match = Curry._2(Lr0$prime[/* lex_and_parse */36], /* :: */[
                            /* tuple */[
                              "\\+",
                              "+"
                            ],
                            /* :: */[
                              /* tuple */[
                                "\\*",
                                "*"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "\\(",
                                  "("
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "\\)",
                                    ")"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "\\w+",
                                      "id"
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ], "foo+bar");
                      if (match.tag) {
                        return Jest.fail("lex_and_parse error");
                      } else {
                        return Jest.pass;
                      }
                    }));
      }));

var M = 0;

var MS = 0;

var SI = 0;

var MStack = 0;

var MQueue = 0;

exports.M = M;
exports.MS = MS;
exports.SI = SI;
exports.MStack = MStack;
exports.MQueue = MQueue;
exports.Grammar = Grammar;
/* grammar Not a pure module */
