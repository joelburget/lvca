// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Parsing = require("../src/Parsing.bs.js");
var Bidirectional = require("../src/Bidirectional.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

Jest.describe("Bidirectional", (function (param) {
        var P_statics = Parsing.Incremental(Parsing.Parseable_statics);
        Parsing.Incremental(Parsing.Parseable_term);
        var match = Curry._1(P_statics[/* parse */5], "\n\n-------\nctx >> true() => bool\n\n-------\nctx >> false() => bool\n\nctx >> tm1 => arr(ty1; ty2)   ctx >> tm2 <= ty1\n-------\nctx >> app(tm1; tm2) => ty2\n\nctx, x : ty1 >> body <= ty2\n-------\nctx >> lam(x. body) <= arr(ty1; ty2)\n\n-------\nctx >> annot(tm; ty) => ty\n\nctx >> tm => ty\n-------\nctx >> tm <= ty\n  ");
        if (match.tag) {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "Bidirectional_test.ml",
                  33,
                  6
                ]
              ];
        } else {
          var statics = match[0];
          return Jest.test("check fun", (function (param) {
                        var ty = /* Term */Block.__(0, [
                            "bool",
                            /* [] */0
                          ]);
                        var tm_001 = /* :: */[
                          /* Scope */[
                            /* [] */0,
                            /* Term */Block.__(0, [
                                "lam",
                                /* :: */[
                                  /* Scope */[
                                    /* :: */[
                                      "x",
                                      /* [] */0
                                    ],
                                    /* Term */Block.__(0, [
                                        "true",
                                        /* [] */0
                                      ])
                                  ],
                                  /* [] */0
                                ]
                              ])
                          ],
                          /* :: */[
                            /* Scope */[
                              /* [] */0,
                              /* Term */Block.__(0, [
                                  "arr",
                                  /* :: */[
                                    /* Scope */[
                                      /* [] */0,
                                      ty
                                    ],
                                    /* :: */[
                                      /* Scope */[
                                        /* [] */0,
                                        ty
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ])
                            ],
                            /* [] */0
                          ]
                        ];
                        var tm = /* Term */Block.__(0, [
                            "annot",
                            tm_001
                          ]);
                        return Jest.Expect[/* toBe */2](/* () */0, Jest.Expect[/* expect */0](Bidirectional.check(/* record */[
                                            /* rules */statics,
                                            /* var_types */Belt_MapString.empty
                                          ], /* Typing */[
                                            tm,
                                            ty
                                          ])));
                      }));
        }
      }));

var M = 0;

exports.M = M;
/*  Not a pure module */
