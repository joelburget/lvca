dynamics: ID EQ BACKSLASH LEFT_PAREN ID COLON ID RIGHT_PAREN ARROW WITH
##
## Ends in an error in state: 46.
##
## atomic_core -> BACKSLASH nonempty_list(typed_arg) ARROW . core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## BACKSLASH nonempty_list(typed_arg) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE> 1

dynamics: ID EQ BACKSLASH LEFT_PAREN ID COLON ID RIGHT_PAREN WITH
##
## Ends in an error in state: 43.
##
## nonempty_list(typed_arg) -> typed_arg . [ ARROW ]
## nonempty_list(typed_arg) -> typed_arg . nonempty_list(typed_arg) [ ARROW ]
##
## The known suffix of the stack is as follows:
## typed_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE> 2

dynamics: ID EQ BACKSLASH LEFT_PAREN ID COLON STRING WITH
##
## Ends in an error in state: 40.
##
## typed_arg -> LEFT_PAREN ID COLON sort . RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ID COLON sort
##

<YOUR SYNTAX ERROR MESSAGE HERE> 3

dynamics: ID EQ BACKSLASH LEFT_PAREN ID COLON WITH
##
## Ends in an error in state: 39.
##
## typed_arg -> LEFT_PAREN ID COLON . sort RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE> 4

dynamics: ID EQ BACKSLASH LEFT_PAREN ID WITH
##
## Ends in an error in state: 38.
##
## typed_arg -> LEFT_PAREN ID . COLON sort RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 5

dynamics: ID EQ BACKSLASH LEFT_PAREN WITH
##
## Ends in an error in state: 37.
##
## typed_arg -> LEFT_PAREN . ID COLON sort RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 6

dynamics: ID EQ BACKSLASH WITH
##
## Ends in an error in state: 36.
##
## atomic_core -> BACKSLASH . nonempty_list(typed_arg) ARROW core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## BACKSLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE> 7

dynamics: ID EQ ID LEFT_BRACE
##
## Ends in an error in state: 8.
##
## ast_like -> ID . LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ast_like_scope)) RIGHT_PAREN [ WITH STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EQ EOF DOT COMMA BAR BACKSLASH ARROW ]
## ast_like -> ID . [ WITH STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EQ EOF DOT COMMA BAR BACKSLASH ARROW ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 8

dynamics: ID EQ ID LEFT_PAREN DOT STRING WITH
##
## Ends in an error in state: 22.
##
## separated_nonempty_list(SEMICOLON,ast_like_scope) -> ast_like_scope . [ RIGHT_PAREN ]
## separated_nonempty_list(SEMICOLON,ast_like_scope) -> ast_like_scope . SEMICOLON separated_nonempty_list(SEMICOLON,ast_like_scope) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like_scope
##

<YOUR SYNTAX ERROR MESSAGE HERE> 9

dynamics: ID EQ ID LEFT_PAREN DOT WITH
##
## Ends in an error in state: 20.
##
## ast_like_scope -> loption(separated_nonempty_list(DOT,pattern)) DOT . ast_like [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOT,pattern)) DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE> 10

dynamics: ID EQ ID LEFT_PAREN STRING DOT STRING WITH
##
## Ends in an error in state: 13.
##
## separated_nonempty_list(DOT,pattern) -> pattern . [ DOT ]
## separated_nonempty_list(DOT,pattern) -> pattern . DOT separated_nonempty_list(DOT,pattern) [ DOT ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE> 11

dynamics: ID EQ ID LEFT_PAREN STRING DOT WITH
##
## Ends in an error in state: 14.
##
## separated_nonempty_list(DOT,pattern) -> pattern DOT . separated_nonempty_list(DOT,pattern) [ DOT ]
##
## The known suffix of the stack is as follows:
## pattern DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE> 12

dynamics: ID EQ ID LEFT_PAREN STRING SEMICOLON WITH
##
## Ends in an error in state: 23.
##
## separated_nonempty_list(SEMICOLON,ast_like_scope) -> ast_like_scope SEMICOLON . separated_nonempty_list(SEMICOLON,ast_like_scope) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like_scope SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE> 13

dynamics: ID EQ ID LEFT_PAREN STRING WITH
##
## Ends in an error in state: 25.
##
## ast_like_scope -> ast_like . [ SEMICOLON RIGHT_PAREN ]
## pattern -> ast_like . [ DOT ]
##
## The known suffix of the stack is as follows:
## ast_like
##

<YOUR SYNTAX ERROR MESSAGE HERE> 14

dynamics: ID EQ ID LEFT_PAREN WITH
##
## Ends in an error in state: 9.
##
## ast_like -> ID LEFT_PAREN . loption(separated_nonempty_list(SEMICOLON,ast_like_scope)) RIGHT_PAREN [ WITH STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EQ EOF DOT COMMA BAR BACKSLASH ARROW ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 15

dynamics: ID EQ ID WITH
##
## Ends in an error in state: 74.
##
## list(definition) -> definition . list(definition) [ EOF ]
##
## The known suffix of the stack is as follows:
## definition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production ast_like -> ID
## In state 52, spurious reduction of production ast_like_core -> ast_like
## In state 51, spurious reduction of production atomic_core -> ast_like_core
## In state 49, spurious reduction of production nonempty_list(atomic_core) -> atomic_core
## In state 47, spurious reduction of production core -> nonempty_list(atomic_core)
## In state 70, spurious reduction of production definition -> ID EQ core
##

<YOUR SYNTAX ERROR MESSAGE HERE> 16

dynamics: ID EQ LEFT_BRACKET COMMA WITH
##
## Ends in an error in state: 29.
##
## ast_like -> LEFT_BRACKET loption(separated_nonempty_list(COMMA,ast_like)) option(COMMA) . RIGHT_BRACKET [ WITH STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EQ EOF DOT COMMA BAR BACKSLASH ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACKET loption(separated_nonempty_list(COMMA,ast_like)) option(COMMA)
##

<YOUR SYNTAX ERROR MESSAGE HERE> 17

dynamics: ID EQ LEFT_BRACKET STRING COMMA WITH
##
## Ends in an error in state: 32.
##
## separated_nonempty_list(COMMA,ast_like) -> ast_like COMMA . separated_nonempty_list(COMMA,ast_like) [ RIGHT_BRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ast_like COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 18

dynamics: ID EQ LEFT_BRACKET STRING WITH
##
## Ends in an error in state: 31.
##
## separated_nonempty_list(COMMA,ast_like) -> ast_like . [ RIGHT_BRACKET COMMA ]
## separated_nonempty_list(COMMA,ast_like) -> ast_like . COMMA separated_nonempty_list(COMMA,ast_like) [ RIGHT_BRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ast_like
##

<YOUR SYNTAX ERROR MESSAGE HERE> 19

dynamics: ID EQ LEFT_BRACKET WITH
##
## Ends in an error in state: 6.
##
## ast_like -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,ast_like)) option(COMMA) RIGHT_BRACKET [ WITH STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EQ EOF DOT COMMA BAR BACKSLASH ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE> 20

dynamics: ID EQ LET STRING EQ STRING IN WITH
##
## Ends in an error in state: 54.
##
## atomic_core -> LET pattern EQ core IN . core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ core IN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 21

dynamics: ID EQ LET STRING EQ STRING WITH
##
## Ends in an error in state: 53.
##
## atomic_core -> LET pattern EQ core . IN core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production nonempty_list(atomic_core) -> atomic_core
## In state 47, spurious reduction of production core -> nonempty_list(atomic_core)
##

<YOUR SYNTAX ERROR MESSAGE HERE> 22

dynamics: ID EQ LET STRING EQ WITH
##
## Ends in an error in state: 35.
##
## atomic_core -> LET pattern EQ . core IN core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LET pattern EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE> 23

dynamics: ID EQ LET STRING WITH
##
## Ends in an error in state: 34.
##
## atomic_core -> LET pattern . EQ core IN core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LET pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE> 24

dynamics: ID EQ LET WITH
##
## Ends in an error in state: 5.
##
## atomic_core -> LET . pattern EQ core IN core [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE> 25

dynamics: ID EQ MATCH STRING RIGHT_BRACE
##
## Ends in an error in state: 56.
##
## atomic_core -> MATCH core . WITH LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## MATCH core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production nonempty_list(atomic_core) -> atomic_core
## In state 47, spurious reduction of production core -> nonempty_list(atomic_core)
##

<YOUR SYNTAX ERROR MESSAGE HERE> 26

dynamics: ID EQ MATCH STRING WITH LEFT_BRACE BAR WITH
##
## Ends in an error in state: 60.
##
## atomic_core -> MATCH core WITH LEFT_BRACE option(BAR) . separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## MATCH core WITH LEFT_BRACE option(BAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE> 27

dynamics: ID EQ MATCH STRING WITH LEFT_BRACE STRING ARROW ID BAR WITH
##
## Ends in an error in state: 64.
##
## separated_nonempty_list(BAR,case_line) -> case_line BAR . separated_nonempty_list(BAR,case_line) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## case_line BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE> 28

dynamics: ID EQ MATCH STRING WITH LEFT_BRACE STRING ARROW ID WITH
##
## Ends in an error in state: 63.
##
## separated_nonempty_list(BAR,case_line) -> case_line . [ RIGHT_BRACE ]
## separated_nonempty_list(BAR,case_line) -> case_line . BAR separated_nonempty_list(BAR,case_line) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## case_line
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production ast_like -> ID
## In state 52, spurious reduction of production ast_like_core -> ast_like
## In state 51, spurious reduction of production atomic_core -> ast_like_core
## In state 49, spurious reduction of production nonempty_list(atomic_core) -> atomic_core
## In state 47, spurious reduction of production core -> nonempty_list(atomic_core)
## In state 68, spurious reduction of production case_line -> binding_aware_pattern ARROW core
##

<YOUR SYNTAX ERROR MESSAGE HERE> 29

dynamics: ID EQ MATCH STRING WITH LEFT_BRACE STRING ARROW WITH
##
## Ends in an error in state: 67.
##
## case_line -> binding_aware_pattern ARROW . core [ RIGHT_BRACE BAR ]
##
## The known suffix of the stack is as follows:
## binding_aware_pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE> 30

dynamics: ID EQ MATCH STRING WITH LEFT_BRACE STRING WITH
##
## Ends in an error in state: 66.
##
## case_line -> binding_aware_pattern . ARROW core [ RIGHT_BRACE BAR ]
##
## The known suffix of the stack is as follows:
## binding_aware_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE> 31

dynamics: ID EQ MATCH STRING WITH LEFT_BRACE WITH
##
## Ends in an error in state: 58.
##
## atomic_core -> MATCH core WITH LEFT_BRACE . option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## MATCH core WITH LEFT_BRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE> 32

dynamics: ID EQ MATCH STRING WITH WITH
##
## Ends in an error in state: 57.
##
## atomic_core -> MATCH core WITH . LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## MATCH core WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE> 33

dynamics: ID EQ MATCH WITH
##
## Ends in an error in state: 4.
##
## atomic_core -> MATCH . core WITH LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE> 34

dynamics: ID EQ STRING SEMICOLON
##
## Ends in an error in state: 49.
##
## nonempty_list(atomic_core) -> atomic_core . [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
## nonempty_list(atomic_core) -> atomic_core . nonempty_list(atomic_core) [ WITH STRING RIGHT_BRACE MATCH LET LEFT_BRACKET INT IN ID EOF BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## atomic_core
##

<YOUR SYNTAX ERROR MESSAGE HERE> 35

dynamics: ID EQ WITH
##
## Ends in an error in state: 2.
##
## definition -> ID EQ . core [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE> 36

dynamics: ID WITH
##
## Ends in an error in state: 1.
##
## definition -> ID . EQ core [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 37

dynamics: WITH
##
## Ends in an error in state: 0.
##
## dynamics' -> . dynamics [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE> 38

