// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Demo = require("./demo.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Lexing = require("bs-platform/lib/js/lexing.js");
var Parsing = require("bs-platform/lib/js/parsing.js");
var TermLexer = require("./termLexer.bs.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var TermParser = require("./termParser.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function show_term(term) {
  switch (term.tag | 0) {
    case 0 : 
        return Block.spliceApply(React.createElement, [
                    "span",
                    { },
                    $$Array.concat(/* :: */[
                          /* array */[term[0]],
                          /* :: */[
                            /* array */["("],
                            /* :: */[
                              $$Array.of_list(List.map(show_scope, term[1])),
                              /* :: */[
                                /* array */[")"],
                                /* [] */0
                              ]
                            ]
                          ]
                        ])
                  ]);
    case 1 : 
        return term[0];
    case 2 : 
        return Block.spliceApply(React.createElement, [
                    "span",
                    { },
                    $$Array.concat(/* :: */[
                          /* array */["["],
                          /* :: */[
                            $$Array.of_list(List.map(show_term, term[0])),
                            /* :: */[
                              /* array */["]"],
                              /* [] */0
                            ]
                          ]
                        ])
                  ]);
    case 3 : 
        return "Primitive";
    
  }
}

function show_scope(scope) {
  return Block.spliceApply(React.createElement, [
              "span",
              { },
              $$Array.concat(/* :: */[
                    $$Array.of_list(Demo.intersperse_after(List.map((function (prim) {
                                    return prim;
                                  }), scope[0]), ".")),
                    /* :: */[
                      /* array */[show_term(scope[1])],
                      /* [] */0
                    ]
                  ])
            ]);
}

function Index$TermViewer(Props) {
  var term = Props.term;
  return React.createElement("div", undefined, show_term(term));
}

var TermViewer = /* module */[
  /* show_term */show_term,
  /* show_scope */show_scope,
  /* make */Index$TermViewer
];

function Index$LvcaViewer(Props) {
  var match = React.useState((function () {
          return "";
        }));
  var setText = match[1];
  var text = match[0];
  var termResult;
  var exit = 0;
  var term;
  try {
    term = TermParser.term(TermLexer.read, Lexing.from_string(text));
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === TermLexer.$$SyntaxError) {
      termResult = /* Error */Block.__(1, [exn[1]]);
    } else if (exn === Parsing.Parse_error) {
      termResult = /* Error */Block.__(1, ["Parse error"]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    termResult = /* Ok */Block.__(0, [term]);
  }
  var termView;
  termView = termResult.tag ? React.createElement("div", {
          className: "error"
        }, termResult[0]) : React.createElement(Index$TermViewer, {
          term: termResult[0]
        });
  return React.createElement("div", undefined, React.createElement("h1", undefined, "LVCA"), React.createElement("textarea", {
                  value: text,
                  onChange: (function ($$event) {
                      return Curry._1(setText, $$event.target.value);
                    })
                }), termView);
}

var LvcaViewer = /* module */[/* make */Index$LvcaViewer];

ReactDOMRe.renderToElementWithId(React.createElement(Index$LvcaViewer, { }), "index");

exports.TermViewer = TermViewer;
exports.LvcaViewer = LvcaViewer;
/*  Not a pure module */
