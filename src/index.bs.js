// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Lexing = require("bs-platform/lib/js/lexing.js");
var Parsing = require("bs-platform/lib/js/parsing.js");
var JsonLexer = require("./jsonLexer.bs.js");
var JsonParser = require("./jsonParser.bs.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function make_inner(json) {
  if (typeof json === "number") {
    return "null";
  } else {
    var variant = json[0];
    if (variant >= 365180284) {
      if (variant >= 848054398) {
        if (variant >= 963043957) {
          return Block.spliceApply(React.createElement, [
                      "span",
                      { },
                      $$Array.concat(/* :: */[
                            /* array */["{"],
                            /* :: */[
                              $$Array.of_list(List.map((function (param) {
                                          return React.createElement("span", undefined, param[0], make_inner(param[1]));
                                        }), json[1])),
                              /* :: */[
                                /* array */["}"],
                                /* [] */0
                              ]
                            ]
                          ])
                    ]);
        } else {
          return Block.spliceApply(React.createElement, [
                      "span",
                      { },
                      $$Array.concat(/* :: */[
                            /* array */["["],
                            /* :: */[
                              $$Array.of_list(List.map(make_inner, json[1])),
                              /* :: */[
                                /* array */["]"],
                                /* [] */0
                              ]
                            ]
                          ])
                    ]);
        }
      } else if (variant >= 737456202) {
        if (json[1]) {
          return "true";
        } else {
          return "false";
        }
      } else {
        return json[1].toString();
      }
    } else if (variant >= 3654863) {
      return String(json[1]);
    } else {
      return json[1];
    }
  }
}

function Index$JsonViewer(Props) {
  var json = Props.json;
  return React.createElement("div", undefined, make_inner(json));
}

var JsonViewer = /* module */[
  /* make_inner */make_inner,
  /* make */Index$JsonViewer
];

function Index$LvcaViewer(Props) {
  var match = React.useState((function () {
          return "";
        }));
  var setText = match[1];
  var text = match[0];
  var jsonResult;
  var exit = 0;
  var val;
  try {
    val = JsonParser.prog(JsonLexer.read, Lexing.from_string(text));
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === JsonLexer.$$SyntaxError) {
      jsonResult = /* Error */Block.__(1, [exn[1]]);
    } else if (exn === Parsing.Parse_error) {
      jsonResult = /* Error */Block.__(1, ["Parse error"]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    jsonResult = val !== undefined ? /* Ok */Block.__(0, [val]) : /* Error */Block.__(1, ["empty"]);
  }
  var jsonView;
  jsonView = jsonResult.tag ? jsonResult[0] : React.createElement(Index$JsonViewer, {
          json: jsonResult[0]
        });
  return React.createElement("div", undefined, React.createElement("h1", undefined, "LVCA"), React.createElement("textarea", {
                  value: text,
                  onChange: (function ($$event) {
                      return Curry._1(setText, $$event.target.value);
                    })
                }), jsonView);
}

var LvcaViewer = /* module */[/* make */Index$LvcaViewer];

ReactDOMRe.renderToElementWithId(React.createElement(Index$LvcaViewer, { }), "index");

exports.JsonViewer = JsonViewer;
exports.LvcaViewer = LvcaViewer;
/*  Not a pure module */
