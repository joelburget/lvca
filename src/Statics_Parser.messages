term_top: ID ID
##
## Ends in an error in state: 5.
##
## term -> ID . LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,scope)) RIGHT_PAREN [ SEMICOLON RIGHT_PAREN RIGHT_D_ARR LINE LEFT_D_ARR EOF DOT CTX_SEPARATOR CTX COMMA ]
## term -> ID . [ SEMICOLON RIGHT_PAREN RIGHT_D_ARR LINE LEFT_D_ARR EOF DOT CTX_SEPARATOR CTX COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

Invalid term. Terms look like `tm(...)` and variables like `x`.

term_top: ID LEFT_PAREN ID DOT SEMICOLON
##
## Ends in an error in state: 8.
##
## separated_nonempty_list(DOT,term) -> term DOT . separated_nonempty_list(DOT,term) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## term DOT
##

Invalid term after `.`.

term_top: ID LEFT_PAREN ID RIGHT_D_ARR
##
## Ends in an error in state: 7.
##
## separated_nonempty_list(DOT,term) -> term . [ SEMICOLON RIGHT_PAREN ]
## separated_nonempty_list(DOT,term) -> term . DOT separated_nonempty_list(DOT,term) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production term -> ID
##

Invalid token after term.

term_top: ID LEFT_PAREN ID SEMICOLON SEMICOLON
##
## Ends in an error in state: 13.
##
## separated_nonempty_list(SEMICOLON,scope) -> scope SEMICOLON . separated_nonempty_list(SEMICOLON,scope) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## scope SEMICOLON
##

Invalid token after term. Expected a scope.

term_top: ID LEFT_PAREN SEMICOLON
##
## Ends in an error in state: 6.
##
## term -> ID LEFT_PAREN . loption(separated_nonempty_list(SEMICOLON,scope)) RIGHT_PAREN [ SEMICOLON RIGHT_PAREN RIGHT_D_ARR LINE LEFT_D_ARR EOF DOT CTX_SEPARATOR CTX COMMA ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN
##

Invalid token after `(`. Expected subterms followed by `)`..

term_top: ID SEMICOLON
##
## Ends in an error in state: 44.
##
## term_top -> term . EOF [ # ]
##
## The known suffix of the stack is as follows:
## term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production term -> ID
##

Invalid token after term.

term_top: SEMICOLON
##
## Ends in an error in state: 42.
##
## term_top' -> . term_top [ # ]
##
## The known suffix of the stack is as follows:
##
##

Invalid token, expected a term.

rules: CTX COMMA ID COLON ID COMMA SEMICOLON
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(COMMA,typed_term) -> typed_term COMMA . separated_nonempty_list(COMMA,typed_term) [ CTX_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## typed_term COMMA
##

Invalid token after `,` in context. Expected a typed term.

rules: CTX COMMA ID COLON ID SEMICOLON
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(COMMA,typed_term) -> typed_term . [ CTX_SEPARATOR ]
## separated_nonempty_list(COMMA,typed_term) -> typed_term . COMMA separated_nonempty_list(COMMA,typed_term) [ CTX_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## typed_term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production term -> ID
## In state 17, spurious reduction of production typed_term -> ID COLON term
##

Invalid token after term typing in context.

rules: CTX COMMA ID COLON SEMICOLON
##
## Ends in an error in state: 4.
##
## typed_term -> ID COLON . term [ CTX_SEPARATOR COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

Invalid token after `:`. Expected a type (term).

rules: CTX COMMA ID SEMICOLON
##
## Ends in an error in state: 3.
##
## typed_term -> ID . COLON term [ CTX_SEPARATOR COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

Invalid token after ID. Expected a `:`.

rules: CTX COMMA SEMICOLON
##
## Ends in an error in state: 2.
##
## context -> CTX COMMA . separated_nonempty_list(COMMA,typed_term) [ CTX_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## CTX COMMA
##

Invalid token after `,`. Expected a list of typed terms.

rules: CTX CTX_SEPARATOR ID LEFT_D_ARR ID SEMICOLON
##
## Ends in an error in state: 38.
##
## list(hypothesis) -> hypothesis . list(hypothesis) [ LINE ]
##
## The known suffix of the stack is as follows:
## hypothesis
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production term -> ID
## In state 35, spurious reduction of production checking_rule -> term LEFT_D_ARR term
## In state 37, spurious reduction of production typing_clause -> checking_rule
## In state 30, spurious reduction of production hypothesis -> context CTX_SEPARATOR typing_clause
##

Invalid token after hypothesis. Expected either another hypothesis or line separator.

rules: CTX CTX_SEPARATOR ID LEFT_D_ARR SEMICOLON
##
## Ends in an error in state: 34.
##
## checking_rule -> term LEFT_D_ARR . term [ LINE EOF CTX ]
##
## The known suffix of the stack is as follows:
## term LEFT_D_ARR
##

Invalid token after `<=`. Expected a term.

rules: CTX CTX_SEPARATOR ID RIGHT_D_ARR SEMICOLON
##
## Ends in an error in state: 32.
##
## inference_rule -> term RIGHT_D_ARR . term [ LINE EOF CTX ]
##
## The known suffix of the stack is as follows:
## term RIGHT_D_ARR
##

Invalid token after `=>`. Expected a term.

rules: CTX CTX_SEPARATOR ID SEMICOLON
##
## Ends in an error in state: 31.
##
## checking_rule -> term . LEFT_D_ARR term [ LINE EOF CTX ]
## inference_rule -> term . RIGHT_D_ARR term [ LINE EOF CTX ]
##
## The known suffix of the stack is as follows:
## term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production term -> ID
##

Invalid token after term. Expected `<=` or `=>`.

rules: CTX CTX_SEPARATOR SEMICOLON
##
## Ends in an error in state: 29.
##
## hypothesis -> context CTX_SEPARATOR . typing_clause [ LINE EOF CTX ]
##
## The known suffix of the stack is as follows:
## context CTX_SEPARATOR
##

Invalid token after `>>`. Expected either an inference or checking rule.

rules: CTX SEMICOLON
##
## Ends in an error in state: 1.
##
## context -> CTX . [ CTX_SEPARATOR ]
## context -> CTX . COMMA separated_nonempty_list(COMMA,typed_term) [ CTX_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## CTX
##

Invalid token after `ctx`. Expected `,` or `>>`.

rules: LINE CTX CTX_SEPARATOR ID LEFT_D_ARR ID SEMICOLON
##
## Ends in an error in state: 23.
##
## list(rule) -> rule . list(rule) [ EOF ]
##
## The known suffix of the stack is as follows:
## rule
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 5, spurious reduction of production term -> ID
## In state 35, spurious reduction of production checking_rule -> term LEFT_D_ARR term
## In state 37, spurious reduction of production typing_clause -> checking_rule
## In state 30, spurious reduction of production hypothesis -> context CTX_SEPARATOR typing_clause
## In state 27, spurious reduction of production rule -> list(hypothesis) LINE hypothesis
##

Invalid token after rule. Expected another rule or EOF.

rules: LINE SEMICOLON
##
## Ends in an error in state: 26.
##
## rule -> list(hypothesis) LINE . hypothesis [ LINE EOF CTX ]
##
## The known suffix of the stack is as follows:
## list(hypothesis) LINE
##

Invalid token after line separator. Expected a conclusion.

rules: SEMICOLON
##
## Ends in an error in state: 0.
##
## rules' -> . rules [ # ]
##
## The known suffix of the stack is as follows:
##
##

Invalid token. Expected a list of rules.

