// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Lex = require("./Lex.bs.js");
var Util = require("./Util.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Bitstring = require("./Bitstring.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Belt_MutableMap = require("bs-platform/lib/js/belt_MutableMap.js");
var Belt_MutableSet = require("bs-platform/lib/js/belt_MutableSet.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Belt_MutableQueue = require("bs-platform/lib/js/belt_MutableQueue.js");
var Belt_MutableStack = require("bs-platform/lib/js/belt_MutableStack.js");
var Belt_MutableMapInt = require("bs-platform/lib/js/belt_MutableMapInt.js");
var Belt_MutableSetInt = require("bs-platform/lib/js/belt_MutableSetInt.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function cmp(param, param$1) {
  var c = Caml_obj.caml_compare(param[0], param$1[0]);
  if (c !== 0) {
    return c;
  } else {
    return Caml_obj.caml_compare(param[1], param$1[1]);
  }
}

var SymbolCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

function cmp$1(param, param$1) {
  var c = Caml_primitive.caml_int_compare(param[/* item */0], param$1[/* item */0]);
  if (c !== 0) {
    return c;
  } else {
    return Belt_SetInt.cmp(param[/* lookhead_set */1], param$1[/* lookhead_set */1]);
  }
}

var LookaheadItemCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

function view_item(item) {
  return /* record */[
          /* production_num */item & 16777215,
          /* position */((item & -16777216) >>> 24)
        ];
}

function mk_item$prime(production_num, position) {
  return (position << 24) | production_num;
}

function mk_item(param) {
  return mk_item$prime(param[/* production_num */0], param[/* position */1]);
}

function simplify_config_set(param) {
  return Belt_SetInt.union(param[/* kernel_items */0], param[/* nonkernel_items */1]);
}

var ComparableSet = Belt_Id.MakeComparable(/* module */[/* cmp */Belt_SetInt.cmp]);

var ParseFinished = Caml_exceptions.create("LrParsing.ParseFinished");

var ParseFailed = Caml_exceptions.create("LrParsing.ParseFailed");

var PopFailed = Caml_exceptions.create("LrParsing.PopFailed");

function pop_front_exn(position, arr) {
  var match = Belt_MutableQueue.pop(arr);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    throw [
          PopFailed,
          position
        ];
  }
}

function action_abbrev(param) {
  if (typeof param === "number") {
    if (param === 0) {
      return "acc";
    } else {
      return "";
    }
  } else if (param.tag) {
    return "r" + String(param[0]);
  } else {
    return "s" + String(param[0]);
  }
}

function string_of_stack(states) {
  return Belt_Array.map(states, (function (prim) {
                  return String(prim);
                })).join(" ");
}

function string_of_tokens(toks) {
  return Belt_Array.map(toks, (function (param) {
                  return param[/* name */0];
                })).join(" ");
}

function Lr0(G) {
  var production_map = Belt_MutableMapInt.make(/* () */0);
  var production_nonterminal_map = Belt_MutableMapInt.make(/* () */0);
  var nonterminal_production_map = Belt_MutableMapInt.make(/* () */0);
  var number_of_nonterminals = Belt_MapInt.size(G[/* grammar */0][/* nonterminals */0]);
  var number_of_terminals = G[/* grammar */0][/* terminal_nums */1].length;
  var terminal_names = Belt_MapInt.fromArray(Belt_Array.map(G[/* grammar */0][/* terminal_nums */1], (function (param) {
              return /* tuple */[
                      param[1],
                      param[0]
                    ];
            })));
  var nonterminal_names = Belt_MapInt.fromArray(Belt_Array.map(G[/* grammar */0][/* nonterminal_nums */2], (function (param) {
              return /* tuple */[
                      param[1],
                      param[0]
                    ];
            })));
  var terminal_nums = Belt_MapString.fromArray(G[/* grammar */0][/* terminal_nums */1]);
  var nonterminal_nums = Belt_MapString.fromArray(G[/* grammar */0][/* nonterminal_nums */2]);
  var string_of_symbol = function (param) {
    if (param.tag) {
      var nt_num = param[0];
      return Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "string_of_item: failed to get nonterminal ",
                                /* Scan_get_counter */Block.__(21, [
                                    /* Char_counter */1,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "string_of_item: failed to get nonterminal %n"
                          ]), nt_num))(Belt_MapInt.get(nonterminal_names, nt_num));
    } else {
      var t_num = param[0];
      return Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "string_of_item: failed to get terminal ",
                                /* Scan_get_counter */Block.__(21, [
                                    /* Char_counter */1,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "string_of_item: failed to get terminal %n"
                          ]), t_num))(Belt_MapInt.get(terminal_names, t_num));
    }
  };
  var string_of_item = function (item) {
    var match = view_item(item);
    var position = match[/* position */1];
    var production_num = match[/* production_num */0];
    var production = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Lr0 string_of_item: unable to find production ",
                        /* Scan_get_counter */Block.__(21, [
                            /* Char_counter */1,
                            /* String_literal */Block.__(11, [
                                " in production_map",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Lr0 string_of_item: unable to find production %n in production_map"
                  ]), production_num))(Belt_MutableMapInt.get(production_map, production_num));
    var pieces = /* array */[];
    Belt_List.forEachWithIndex(production, (function (i, symbol) {
            if (position === i) {
              pieces.push(".");
            }
            return pieces.push(string_of_symbol(symbol));
          }));
    var nt_num = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Lr0 string_of_item: unable to find production ",
                        /* Scan_get_counter */Block.__(21, [
                            /* Char_counter */1,
                            /* String_literal */Block.__(11, [
                                " in production_nonterminal_map",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Lr0 string_of_item: unable to find production %n in production_nonterminal_map"
                  ]), production_num))(Belt_MutableMapInt.get(production_nonterminal_map, production_num));
    var nt_name = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Lr0 string_of_production: unable to find nonterminal ",
                        /* Scan_get_counter */Block.__(21, [
                            /* Char_counter */1,
                            /* String_literal */Block.__(11, [
                                " in nonterminal_names",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Lr0 string_of_production: unable to find nonterminal %n in nonterminal_names"
                  ]), production_num))(Belt_MapInt.get(nonterminal_names, nt_num));
    return Curry._2(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            " -> ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%s -> %s"
                  ]), nt_name, pieces.join(" "));
  };
  var string_of_item_set = function ($staropt$star, item_set) {
    var sep = $staropt$star !== undefined ? $staropt$star : " ";
    return Belt_Array.map(Belt_SetInt.toArray(item_set), string_of_item).join(sep);
  };
  var string_of_production = function (production_num) {
    var production = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Lr0 string_of_item: unable to find production ",
                        /* Scan_get_counter */Block.__(21, [
                            /* Char_counter */1,
                            /* String_literal */Block.__(11, [
                                " in production_map",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Lr0 string_of_item: unable to find production %n in production_map"
                  ]), production_num))(Belt_MutableMapInt.get(production_map, production_num));
    var nt_num = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Lr0 string_of_item: unable to find production ",
                        /* Scan_get_counter */Block.__(21, [
                            /* Char_counter */1,
                            /* String_literal */Block.__(11, [
                                " in production_nonterminal_map",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Lr0 string_of_item: unable to find production %n in production_nonterminal_map"
                  ]), production_num))(Belt_MutableMapInt.get(production_nonterminal_map, production_num));
    var rhs = Belt_List.toArray(Belt_List.map(production, string_of_symbol)).join(" ");
    var nt_name = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Lr0 string_of_production: unable to find nonterminal ",
                        /* Scan_get_counter */Block.__(21, [
                            /* Char_counter */1,
                            /* String_literal */Block.__(11, [
                                " in nonterminal_names",
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "Lr0 string_of_production: unable to find nonterminal %n in nonterminal_names"
                  ]), production_num))(Belt_MapInt.get(nonterminal_names, nt_num));
    return Curry._2(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            " -> ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%s -> %s"
                  ]), nt_name, rhs);
  };
  var string_of_action = function (param) {
    if (typeof param === "number") {
      if (param === 0) {
        return "accept";
      } else {
        return "error";
      }
    } else if (param.tag) {
      return "reduce by " + string_of_production(param[0]);
    } else {
      return "shift to " + String(param[0]);
    }
  };
  var production_cnt = /* record */[/* contents */0];
  Belt_MapInt.forEach(G[/* grammar */0][/* nonterminals */0], (function (nt_num, param) {
          Belt_MutableMapInt.set(nonterminal_production_map, nt_num, Belt_MutableSetInt.make(/* () */0));
          return Belt_List.forEach(param[/* productions */0], (function (production) {
                        var production_num = production_cnt[0];
                        production_cnt[0] = production_num + 1 | 0;
                        Belt_MutableMapInt.set(production_map, production_num, production);
                        Belt_MutableMapInt.set(production_nonterminal_map, production_num, nt_num);
                        var prod_set = Util.get_option$prime("Lr0 preprocessing -- unable to find nonterminal " + String(nt_num))(Belt_MutableMapInt.get(nonterminal_production_map, nt_num));
                        return Belt_MutableSetInt.add(prod_set, production_num);
                      }));
        }));
  var get_nonterminal_num = function (p_num) {
    return Util.get_option$prime("get_nonterminal_num: couldn't find production " + String(p_num))(Belt_MutableMapInt.get(production_nonterminal_map, p_num));
  };
  var get_nonterminal = function (pn) {
    return Util.get_option$prime("get_nonterminal: couldn't find production " + String(pn))(Belt_MapInt.get(G[/* grammar */0][/* nonterminals */0], get_nonterminal_num(pn)));
  };
  var closure = function (initial_items) {
    var added = Bitstring.alloc(number_of_nonterminals, false);
    var nonkernel_items = Belt_MutableSetInt.make(/* () */0);
    var nt_stack = Belt_MutableSetInt.make(/* () */0);
    Belt_SetInt.forEach(initial_items, (function (item) {
            var match = view_item(item);
            var production_num = match[/* production_num */0];
            var production = Util.get_option$prime("closure: couldn't find production " + String(production_num))(Belt_MutableMapInt.get(production_map, production_num));
            var match$1 = Belt_List.get(production, match[/* position */1]);
            if (match$1 !== undefined) {
              var match$2 = match$1;
              if (match$2.tag) {
                return Belt_MutableSetInt.add(nt_stack, match$2[0]);
              } else {
                return /* () */0;
              }
            } else {
              return /* () */0;
            }
          }));
    while(!Belt_MutableSetInt.isEmpty(nt_stack)) {
      var nonterminal_num = Util.get_option$prime("the set is not empty!")(Belt_MutableSetInt.minimum(nt_stack));
      Belt_MutableSetInt.remove(nt_stack, nonterminal_num);
      var is_added = Util.get_option$prime(Curry._2(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Lr0 closure: couldn't find nonterminal ",
                          /* Scan_get_counter */Block.__(21, [
                              /* Char_counter */1,
                              /* String_literal */Block.__(11, [
                                  " in added (nonterminal count ",
                                  /* Scan_get_counter */Block.__(21, [
                                      /* Char_counter */1,
                                      /* Char_literal */Block.__(12, [
                                          /* ")" */41,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "Lr0 closure: couldn't find nonterminal %n in added (nonterminal count %n)"
                    ]), nonterminal_num, Bitstring.length(added)))(Bitstring.get(added, nonterminal_num));
      if (!is_added) {
        Bitstring.setExn(added, nonterminal_num, true);
        var production_set = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "Lr0 closure: unable to find nonterminal ",
                            /* Scan_get_counter */Block.__(21, [
                                /* Char_counter */1,
                                /* String_literal */Block.__(11, [
                                    " nonterminal_production_map",
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "Lr0 closure: unable to find nonterminal %n nonterminal_production_map"
                      ]), nonterminal_num))(Belt_MutableMapInt.get(nonterminal_production_map, nonterminal_num));
        Belt_MutableSetInt.forEach(production_set, (function (production_num) {
                return Belt_MutableSetInt.add(nonkernel_items, mk_item$prime(production_num, 0));
              }));
        var match = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "Lr0 closure: unable to find nonterminal ",
                            /* Scan_get_counter */Block.__(21, [
                                /* Char_counter */1,
                                /* String_literal */Block.__(11, [
                                    " in G.grammar.nonterminals",
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "Lr0 closure: unable to find nonterminal %n in G.grammar.nonterminals"
                      ]), nonterminal_num))(Belt_MapInt.get(G[/* grammar */0][/* nonterminals */0], nonterminal_num));
        Belt_List.forEach(match[/* productions */0], (function (production) {
                if (production) {
                  var match = production[0];
                  if (match.tag) {
                    return Belt_MutableSetInt.add(nt_stack, match[0]);
                  } else {
                    return /* () */0;
                  }
                } else {
                  return Pervasives.failwith("Empty production");
                }
              }));
      }
      
    };
    return /* record */[
            /* kernel_items */initial_items,
            /* nonkernel_items */Belt_SetInt.fromArray(Belt_MutableSetInt.toArray(nonkernel_items))
          ];
  };
  var closure$prime = function (items) {
    return simplify_config_set(closure(items));
  };
  var goto_kernel = function (item_set, symbol) {
    var result = Belt_MutableSetInt.make(/* () */0);
    Belt_SetInt.forEach(simplify_config_set(closure(item_set)), (function (item) {
            var match = view_item(item);
            var position = match[/* position */1];
            var production_num = match[/* production_num */0];
            var production = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Lr0 goto_kernel: unable to find production ",
                                /* Scan_get_counter */Block.__(21, [
                                    /* Char_counter */1,
                                    /* String_literal */Block.__(11, [
                                        " in production_map",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Lr0 goto_kernel: unable to find production %n in production_map"
                          ]), production_num))(Belt_MutableMapInt.get(production_map, production_num));
            var match$1 = Belt_List.get(production, position);
            if (match$1 !== undefined && Caml_obj.caml_equal(symbol, match$1)) {
              return Belt_MutableSetInt.add(result, mk_item$prime(production_num, position + 1 | 0));
            } else {
              return /* () */0;
            }
          }));
    return Belt_SetInt.fromArray(Belt_MutableSetInt.toArray(result));
  };
  var grammar_symbols = Belt_List.concat(Belt_List.makeBy(number_of_terminals, (function (n) {
              return /* Terminal */Block.__(0, [n]);
            })), Belt_List.makeBy(number_of_nonterminals, (function (n) {
              return /* Nonterminal */Block.__(1, [n]);
            })));
  var augmented_start = Belt_SetInt.fromArray(/* array */[mk_item(/* record */[
              /* production_num */0,
              /* position */0
            ])]);
  var c = Belt_MutableSet.fromArray(/* array */[augmented_start], ComparableSet);
  var $$continue = /* record */[/* contents */true];
  while($$continue[0]) {
    $$continue[0] = false;
    Belt_MutableSet.forEach(c, (function (items) {
            return Belt_List.forEach(grammar_symbols, (function (symbol) {
                          var goto_items_symbol = goto_kernel(items, symbol);
                          if (!Belt_SetInt.isEmpty(goto_items_symbol) && !Belt_MutableSet.has(c, goto_items_symbol)) {
                            Belt_MutableSet.add(c, goto_items_symbol);
                            $$continue[0] = true;
                            return /* () */0;
                          } else {
                            return 0;
                          }
                        }));
          }));
  };
  var items$prime = Belt_MapInt.fromArray(Belt_Array.mapWithIndex(Belt_MutableSet.toArray(c), (function (i, item_set) {
              return /* tuple */[
                      i,
                      item_set
                    ];
            })));
  var state_to_item_set = function (state) {
    return Util.get_option$prime("state_to_item_set -- couldn't find state " + String(state))(Belt_MapInt.get(items$prime, state));
  };
  var item_set_to_state = function (item_set) {
    return Util.get_option$prime(Curry._2(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "item_set_to_state -- couldn't find item_set (",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        ") (options: ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* ")" */41,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "item_set_to_state -- couldn't find item_set (%s) (options: %s)"
                          ]), string_of_item_set(undefined, item_set), Belt_Array.map(Belt_MapInt.valuesToArray(items$prime), (function (eta) {
                                return string_of_item_set(undefined, eta);
                              })).join(", ")))(Belt_MapInt.findFirstBy(items$prime, (function (param, item_set$prime) {
                        return Caml_obj.caml_equal(Belt_SetInt.toArray(item_set$prime), Belt_SetInt.toArray(item_set));
                      })))[0];
  };
  var augmented_state = item_set_to_state(Belt_SetInt.fromArray(/* array */[0]));
  var in_first_cache = Belt_MutableMap.make(SymbolCmp);
  var stack = Belt_MutableSetInt.make(/* () */0);
  var in_first$prime = function (t_num, sym) {
    var match = Belt_MutableMap.get(in_first_cache, /* tuple */[
          t_num,
          sym
        ]);
    if (match !== undefined) {
      return match;
    } else if (sym.tag) {
      var nt_num = sym[0];
      var match$1 = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Lr0 in_first: unable to find nonterminal ",
                          /* Scan_get_counter */Block.__(21, [
                              /* Char_counter */1,
                              /* String_literal */Block.__(11, [
                                  " in G.grammar.nonterminals",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Lr0 in_first: unable to find nonterminal %n in G.grammar.nonterminals"
                    ]), nt_num))(Belt_MapInt.get(G[/* grammar */0][/* nonterminals */0], nt_num));
      var productions = match$1[/* productions */0];
      var match$2 = Util.fold_right((function (param) {
              var match = param[1];
              var found_it = Belt_List.some(productions, (function (param) {
                      if (param) {
                        var nt = param[0];
                        if (nt.tag) {
                          var nt_num = nt[0];
                          if (Belt_MutableSetInt.has(stack, nt_num)) {
                            return false;
                          } else {
                            Belt_MutableSetInt.add(stack, nt_num);
                            var result = in_first$prime(t_num, nt);
                            Belt_MutableSetInt.remove(stack, nt_num);
                            return result;
                          }
                        } else {
                          return nt[0] === t_num;
                        }
                      } else {
                        return false;
                      }
                    }));
              return /* tuple */[
                      match[0] || found_it,
                      match[1] && false
                    ];
            }), productions, /* tuple */[
            false,
            true
          ]);
      var result = match$2[0];
      Belt_MutableMap.set(in_first_cache, /* tuple */[
            t_num,
            sym
          ], result);
      return result;
    } else {
      return sym[0] === t_num;
    }
  };
  var in_first_str = function (t_num, str) {
    if (str) {
      return in_first$prime(t_num, str[0]);
    } else {
      return false;
    }
  };
  var FoundInFollow = Caml_exceptions.create("LrParsing.Lr0(G).FoundInFollow");
  var in_follow$prime$prime = function (nts_visited, t_num, nt_num, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var match = param[0];
        if (match.tag) {
          var rest = param[1];
          if (match[0] === nt_num && in_first_str(t_num, rest)) {
            return true;
          } else {
            _param = rest;
            continue ;
          }
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        return false;
      }
    };
  };
  var in_follow$prime = function (nts_visited, t_num, nt_num) {
    if (Belt_SetInt.has(nts_visited, nt_num)) {
      return false;
    } else if (nt_num === 0) {
      return t_num === 0;
    } else {
      try {
        var nts_visited$prime = Belt_SetInt.add(nts_visited, nt_num);
        Belt_MutableMapInt.forEach(production_map, (function (prod_num, production) {
                if (in_follow$prime$prime(nts_visited$prime, t_num, nt_num, production)) {
                  throw FoundInFollow;
                }
                var nt_num$prime = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "Lr0 in_follow': unable to find nonterminal ",
                                    /* Scan_get_counter */Block.__(21, [
                                        /* Char_counter */1,
                                        /* String_literal */Block.__(11, [
                                            " in production_nonterminal_map",
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ]),
                                "Lr0 in_follow': unable to find nonterminal %n in production_nonterminal_map"
                              ]), prod_num))(Belt_MutableMapInt.get(production_nonterminal_map, prod_num));
                var match = Util.unsnoc(production);
                var match$1 = match[1];
                if (match$1.tag && match$1[0] === nt_num && in_follow$prime(nts_visited$prime, t_num, nt_num$prime)) {
                  throw FoundInFollow;
                } else {
                  return 0;
                }
              }));
        return false;
      }
      catch (exn){
        if (exn === FoundInFollow) {
          return true;
        } else {
          throw exn;
        }
      }
    }
  };
  var partial_arg = Belt_SetInt.fromArray(/* array */[]);
  var in_follow = function (param, param$1) {
    return in_follow$prime(partial_arg, param, param$1);
  };
  var goto_table = function (state, nt) {
    try {
      return item_set_to_state(goto_kernel(state_to_item_set(state), nt));
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Util.InvariantViolation) {
        return undefined;
      } else {
        throw exn;
      }
    }
  };
  var action_table = function (state, terminal_num) {
    var items = state_to_item_set(state);
    var item_set = simplify_config_set(closure(items));
    var item_set_l = Belt_SetInt.toList(item_set);
    var shift_action = Util.find_by(item_set_l, (function (item) {
            var match = view_item(item);
            var production_num = match[/* production_num */0];
            var symbols = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Lr0 shift_action: unable to find production ",
                                /* Scan_get_counter */Block.__(21, [
                                    /* Char_counter */1,
                                    /* String_literal */Block.__(11, [
                                        " in production_map",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Lr0 shift_action: unable to find production %n in production_map"
                          ]), production_num))(Belt_MutableMapInt.get(production_map, production_num));
            var match$1 = Belt_List.get(symbols, match[/* position */1]);
            if (match$1 !== undefined) {
              var next_symbol = match$1;
              if (next_symbol.tag || next_symbol[0] !== terminal_num) {
                return undefined;
              } else {
                return Belt_Option.map(goto_table(state, next_symbol), (function (x) {
                              return /* Shift */Block.__(0, [x]);
                            }));
              }
            }
            
          }));
    var reduce_action = Util.find_by(item_set_l, (function (item) {
            var match = view_item(item);
            var production_num = match[/* production_num */0];
            var nt_num = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Lr0 shift_action: unable to find production ",
                                /* Scan_get_counter */Block.__(21, [
                                    /* Char_counter */1,
                                    /* String_literal */Block.__(11, [
                                        " in production_nonterminal_map",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Lr0 shift_action: unable to find production %n in production_nonterminal_map"
                          ]), production_num))(Belt_MutableMapInt.get(production_nonterminal_map, production_num));
            var production = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Lr0 shift_action: unable to find production ",
                                /* Scan_get_counter */Block.__(21, [
                                    /* Char_counter */1,
                                    /* String_literal */Block.__(11, [
                                        " in production_map",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Lr0 shift_action: unable to find production %n in production_map"
                          ]), production_num))(Belt_MutableMapInt.get(production_map, production_num));
            if (match[/* position */1] === Belt_List.length(production) && Curry._2(in_follow, terminal_num, nt_num) && nt_num !== 0) {
              return /* Reduce */Block.__(1, [production_num]);
            }
            
          }));
    var accept_action = terminal_num === 0 && Belt_SetInt.has(item_set, 16777216) ? /* Accept */0 : undefined;
    if (shift_action !== undefined) {
      if (reduce_action !== undefined || accept_action !== undefined) {
        return /* Error */1;
      } else {
        return shift_action;
      }
    } else if (reduce_action !== undefined) {
      if (accept_action !== undefined) {
        return /* Error */1;
      } else {
        return reduce_action;
      }
    } else if (accept_action !== undefined) {
      return accept_action;
    } else {
      return /* Error */1;
    }
  };
  var states = Belt_Array.makeBy(Belt_MapInt.size(items$prime), Util.id);
  var terminals = Belt_Array.makeBy(number_of_terminals + 1 | 0, Util.id);
  var nonterminals = Belt_Array.makeBy(Belt_MapString.size(terminal_nums), Util.id);
  var full_action_table = function (param) {
    return Belt_Array.map(states, (function (state) {
                  return Belt_Array.map(terminals, (function (param) {
                                return action_table(state, param);
                              }));
                }));
  };
  var full_goto_table = function (param) {
    return Belt_Array.map(states, (function (state) {
                  return Belt_Array.map(Belt_Array.map(nonterminals, (function (nt) {
                                    return /* Nonterminal */Block.__(1, [nt]);
                                  })), (function (sym) {
                                return /* tuple */[
                                        sym,
                                        goto_table(state, sym)
                                      ];
                              }));
                }));
  };
  var token_to_terminal = function (param) {
    var name = param[/* name */0];
    return Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "Lr0 token_to_terminal: unable to find name ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      " in terminal_nums",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "Lr0 token_to_terminal: unable to find name %s in terminal_nums"
                        ]), name))(Belt_MapString.get(terminal_nums, name));
  };
  var token_to_symbol = function (param) {
    var name = param[/* name */0];
    var t_match = Belt_MapString.get(terminal_nums, name);
    var nt_match = Belt_MapString.get(nonterminal_nums, name);
    if (t_match !== undefined) {
      if (nt_match !== undefined) {
        return Pervasives.failwith("Found both a terminal *and* nonterminal with name " + (name + " (this should never happen)"));
      } else {
        return /* Terminal */Block.__(0, [t_match]);
      }
    } else if (nt_match !== undefined) {
      return /* Nonterminal */Block.__(1, [nt_match]);
    } else {
      return Pervasives.failwith("Failed to find a terminal or nonterminal named " + name);
    }
  };
  var string_of_symbols = function (parse_results) {
    return Belt_Array.map(parse_results, (function (param) {
                    var production = param[/* production */0];
                    if (production.tag) {
                      var production_num = production[0];
                      var nt_num = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "Lr0 string_of_item: unable to find production ",
                                          /* Scan_get_counter */Block.__(21, [
                                              /* Char_counter */1,
                                              /* String_literal */Block.__(11, [
                                                  " in production_nonterminal_map",
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ]),
                                      "Lr0 string_of_item: unable to find production %n in production_nonterminal_map"
                                    ]), production_num))(Belt_MutableMapInt.get(production_nonterminal_map, production_num));
                      return Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "Lr0 string_of_production: unable to find nonterminal ",
                                                /* Scan_get_counter */Block.__(21, [
                                                    /* Char_counter */1,
                                                    /* String_literal */Block.__(11, [
                                                        " in nonterminal_names",
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ]),
                                            "Lr0 string_of_production: unable to find nonterminal %n in nonterminal_names"
                                          ]), production_num))(Belt_MapInt.get(nonterminal_names, nt_num));
                    } else {
                      var terminal_num = production[0];
                      return Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "string_of_symbols: failed to get terminal ",
                                                /* Scan_get_counter */Block.__(21, [
                                                    /* Char_counter */1,
                                                    /* End_of_format */0
                                                  ])
                                              ]),
                                            "string_of_symbols: failed to get terminal %n"
                                          ]), terminal_num))(Belt_MapInt.get(terminal_names, terminal_num));
                    }
                  })).join(" ");
  };
  var parse_trace = function (do_trace, toks) {
    var stack = Belt_MutableStack.make(/* () */0);
    Belt_MutableStack.push(stack, augmented_state);
    var results = Belt_MutableStack.make(/* () */0);
    var trace = Belt_MutableQueue.make(/* () */0);
    try {
      var a = pop_front_exn(0, toks);
      while(true) {
        var match = Belt_MutableStack.top(stack);
        var s = match !== undefined ? match : Pervasives.failwith("invariant violation: empty stack");
        var tok = a;
        var terminal_num = token_to_terminal(tok);
        var action = action_table(s, terminal_num);
        if (do_trace) {
          Belt_MutableQueue.add(trace, /* tuple */[
                action,
                Util.array_of_stack(stack),
                Util.array_of_stack(results),
                Belt_MutableQueue.toArray(toks)
              ]);
        }
        if (typeof action === "number") {
          if (action === 0) {
            throw ParseFinished;
          } else {
            throw [
                  ParseFailed,
                  /* tuple */[
                    tok[/* start */1],
                    Curry._1(Printf.sprintf(/* Format */[
                              /* String_literal */Block.__(11, [
                                  "parse failed -- no valid transition on this token (",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* ")" */41,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ]),
                              "parse failed -- no valid transition on this token (%s)"
                            ]), tok[/* name */0])
                  ]
                ];
          }
        } else if (action.tag) {
          var production_num = action[0];
          var pop_count = Belt_List.length(Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                              /* String_literal */Block.__(11, [
                                  "Lr0 parse_trace: unable to find production ",
                                  /* Scan_get_counter */Block.__(21, [
                                      /* Char_counter */1,
                                      /* String_literal */Block.__(11, [
                                          " in production_map",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ]),
                              "Lr0 parse_trace: unable to find production %n in production_map"
                            ]), production_num))(Belt_MutableMapInt.get(production_map, production_num)));
          var children = /* [] */0;
          var start_pos = 0;
          var end_pos = 0;
          for(var i = 1; i <= pop_count; ++i){
            Belt_MutableStack.pop(stack);
            var match$1 = Belt_MutableStack.pop(results);
            if (match$1 !== undefined) {
              var child = match$1;
              children = /* :: */[
                child,
                children
              ];
              if (i === pop_count) {
                start_pos = child[/* start_pos */2];
              }
              if (i === 1) {
                end_pos = child[/* end_pos */3];
              }
              
            } else {
              Pervasives.failwith("invariant violation: popping from empty stack");
            }
          }
          var nt_num = Util.get_option$prime(Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "Lr0 parse_trace: unable to find production ",
                              /* Scan_get_counter */Block.__(21, [
                                  /* Char_counter */1,
                                  /* String_literal */Block.__(11, [
                                      " in production_nonterminal_map",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "Lr0 parse_trace: unable to find production %n in production_nonterminal_map"
                        ]), production_num))(Belt_MutableMapInt.get(production_nonterminal_map, production_num));
          var match$2 = Belt_MutableStack.top(stack);
          if (match$2 !== undefined) {
            var match$3 = goto_table(match$2, /* Nonterminal */Block.__(1, [nt_num]));
            if (match$3 !== undefined) {
              Belt_MutableStack.push(stack, match$3);
            } else {
              Pervasives.failwith("invariant violation: invalid GOTO transition");
            }
          } else {
            Pervasives.failwith("invariant violation: peeking empty stack");
          }
          Belt_MutableStack.push(results, /* record */[
                /* production : Right */Block.__(1, [production_num]),
                /* children */children,
                /* start_pos */start_pos,
                /* end_pos */end_pos
              ]);
        } else {
          Belt_MutableStack.push(stack, action[0]);
          Belt_MutableStack.push(results, /* record */[
                /* production : Left */Block.__(0, [terminal_num]),
                /* children : [] */0,
                /* start_pos */tok[/* start */1],
                /* end_pos */tok[/* finish */2]
              ]);
          a = pop_front_exn(tok[/* start */1], toks);
        }
      };
      return Pervasives.failwith("invariant violation: can't make it here");
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn === ParseFinished) {
        var n = Belt_MutableStack.size(results);
        if (n !== 0) {
          if (n !== 1) {
            return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "invariant violation: multiple results (",
                                    /* Scan_get_counter */Block.__(21, [
                                        /* Char_counter */1,
                                        /* Char_literal */Block.__(12, [
                                            /* ")" */41,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ]),
                                "invariant violation: multiple results (%n)"
                              ]), n));
          } else {
            var match$4 = Belt_MutableStack.top(results);
            if (match$4 !== undefined) {
              return /* tuple */[
                      /* Ok */Block.__(0, [match$4]),
                      Belt_MutableQueue.toArray(trace)
                    ];
            } else {
              return Pervasives.failwith("invariant violation: no result");
            }
          }
        } else {
          return Pervasives.failwith("invariant violation: no result");
        }
      } else if (exn[0] === ParseFailed) {
        return /* tuple */[
                /* Error */Block.__(1, [exn[1]]),
                Belt_MutableQueue.toArray(trace)
              ];
      } else if (exn[0] === PopFailed) {
        return /* tuple */[
                /* Error */Block.__(1, [/* tuple */[
                      exn[1],
                      "parsing invariant violation -- pop failed"
                    ]]),
                Belt_MutableQueue.toArray(trace)
              ];
      } else {
        throw exn;
      }
    }
  };
  var parse = function (toks) {
    return parse_trace(false, toks)[0];
  };
  var lex_and_parse = function (lexer, input) {
    var match = Lex.lex(lexer, input);
    if (match.tag) {
      return /* Error */Block.__(1, [/* Left */Block.__(0, [match[0]])]);
    } else {
      var len = input.length;
      var tokens$prime = Belt_MutableQueue.fromArray(match[0].filter((function (param) {
                  return param[/* name */0] !== "SPACE";
                })));
      Belt_MutableQueue.add(tokens$prime, /* record */[
            /* name */"$",
            /* start */len,
            /* finish */len
          ]);
      return Util.map_error(parse(tokens$prime), (function (err) {
                    return /* Right */Block.__(1, [err]);
                  }));
    }
  };
  return /* module */[
          /* production_map */production_map,
          /* production_nonterminal_map */production_nonterminal_map,
          /* nonterminal_production_map */nonterminal_production_map,
          /* number_of_nonterminals */number_of_nonterminals,
          /* number_of_terminals */number_of_terminals,
          /* terminal_names */terminal_names,
          /* nonterminal_names */nonterminal_names,
          /* terminal_nums */terminal_nums,
          /* nonterminal_nums */nonterminal_nums,
          /* string_of_symbol */string_of_symbol,
          /* string_of_item */string_of_item,
          /* string_of_item_set */string_of_item_set,
          /* string_of_production */string_of_production,
          /* string_of_action */string_of_action,
          /* production_cnt */production_cnt,
          /* get_nonterminal_num */get_nonterminal_num,
          /* get_nonterminal */get_nonterminal,
          /* closure */closure,
          /* closure' */closure$prime,
          /* goto_kernel */goto_kernel,
          /* grammar_symbols */grammar_symbols,
          /* items */c,
          /* items' */items$prime,
          /* state_to_item_set */state_to_item_set,
          /* item_set_to_state */item_set_to_state,
          /* augmented_state */augmented_state,
          /* in_first_cache */in_first_cache,
          /* in_first */in_first$prime,
          /* in_first_str */in_first_str,
          /* end_marker */0,
          /* FoundInFollow */FoundInFollow,
          /* in_follow'' */in_follow$prime$prime,
          /* in_follow' */in_follow$prime,
          /* in_follow */in_follow,
          /* goto_table */goto_table,
          /* action_table */action_table,
          /* states */states,
          /* terminals */terminals,
          /* nonterminals */nonterminals,
          /* full_action_table */full_action_table,
          /* full_goto_table */full_goto_table,
          /* token_to_terminal */token_to_terminal,
          /* token_to_symbol */token_to_symbol,
          /* string_of_symbols */string_of_symbols,
          /* parse_trace */parse_trace,
          /* parse */parse,
          /* lex_and_parse */lex_and_parse
        ];
}

var A = 0;

var L = 0;

var M = 0;

var MS = 0;

var MM = 0;

var MMI = 0;

var S = 0;

var SI = 0;

var SS = 0;

var MSet = 0;

var MSI = 0;

var Result = 0;

var MStack = 0;

var MQueue = 0;

var get_option$prime = Util.get_option$prime;

var invariant_violation = Util.invariant_violation;

exports.A = A;
exports.L = L;
exports.M = M;
exports.MS = MS;
exports.MM = MM;
exports.MMI = MMI;
exports.S = S;
exports.SI = SI;
exports.SS = SS;
exports.MSet = MSet;
exports.MSI = MSI;
exports.Result = Result;
exports.MStack = MStack;
exports.MQueue = MQueue;
exports.get_option$prime = get_option$prime;
exports.invariant_violation = invariant_violation;
exports.SymbolCmp = SymbolCmp;
exports.LookaheadItemCmp = LookaheadItemCmp;
exports.view_item = view_item;
exports.mk_item$prime = mk_item$prime;
exports.mk_item = mk_item;
exports.simplify_config_set = simplify_config_set;
exports.ComparableSet = ComparableSet;
exports.ParseFinished = ParseFinished;
exports.ParseFailed = ParseFailed;
exports.PopFailed = PopFailed;
exports.pop_front_exn = pop_front_exn;
exports.action_abbrev = action_abbrev;
exports.string_of_stack = string_of_stack;
exports.string_of_tokens = string_of_tokens;
exports.Lr0 = Lr0;
/* SymbolCmp Not a pure module */
