// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Lex = require("./Lex.bs.js");
var Util = require("./Util.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Bitstring = require("./Bitstring.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Belt_MutableMap = require("bs-platform/lib/js/belt_MutableMap.js");
var Belt_MutableSet = require("bs-platform/lib/js/belt_MutableSet.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Belt_MutableQueue = require("bs-platform/lib/js/belt_MutableQueue.js");
var Belt_MutableStack = require("bs-platform/lib/js/belt_MutableStack.js");
var Belt_MutableMapInt = require("bs-platform/lib/js/belt_MutableMapInt.js");
var Belt_MutableSetInt = require("bs-platform/lib/js/belt_MutableSetInt.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function cmp(param, param$1) {
  var c = Caml_obj.caml_compare(param[0], param$1[0]);
  if (c !== 0) {
    return c;
  } else {
    return Caml_obj.caml_compare(param[1], param$1[1]);
  }
}

var SymbolCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

function cmp$1(param, param$1) {
  var c = Caml_primitive.caml_int_compare(param[/* item */0], param$1[/* item */0]);
  if (c !== 0) {
    return c;
  } else {
    return Belt_SetInt.cmp(param[/* lookhead_set */1], param$1[/* lookhead_set */1]);
  }
}

var LookaheadItemCmp = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

function view_item(item) {
  return /* record */[
          /* production_num */item & 16777215,
          /* position */((item & -16777216) >>> 24)
        ];
}

function mk_item$prime(production_num, position) {
  return (position << 24) | production_num;
}

function mk_item(param) {
  return mk_item$prime(param[/* production_num */0], param[/* position */1]);
}

var ComparableSet = Belt_Id.MakeComparable(/* module */[/* cmp */Belt_SetInt.cmp]);

var ParseFinished = Caml_exceptions.create("LrParsing.ParseFinished");

var ParseFailed = Caml_exceptions.create("LrParsing.ParseFailed");

var PopFailed = Caml_exceptions.create("LrParsing.PopFailed");

function pop_front_exn(position, arr) {
  var match = Belt_MutableQueue.pop(arr);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    throw [
          PopFailed,
          position
        ];
  }
}

function Lr0(G) {
  var production_map = Belt_MutableMapInt.make(/* () */0);
  var production_nonterminal_map = Belt_MutableMapInt.make(/* () */0);
  var nonterminal_production_map = Belt_MutableMapInt.make(/* () */0);
  var production_cnt = /* record */[/* contents */0];
  Belt_MapInt.forEach(G[/* grammar */0][/* nonterminals */0], (function (nt_num, param) {
          Belt_MutableMapInt.set(nonterminal_production_map, nt_num, Belt_MutableSetInt.make(/* () */0));
          return Belt_List.forEach(param[/* productions */0], (function (production) {
                        var production_num = production_cnt[0];
                        production_cnt[0] = production_num + 1 | 0;
                        Belt_MutableMapInt.set(production_map, production_num, production);
                        Belt_MutableMapInt.set(production_nonterminal_map, production_num, nt_num);
                        var prod_set = Belt_MutableMapInt.getExn(nonterminal_production_map, nt_num);
                        return Belt_MutableSetInt.add(prod_set, production_num);
                      }));
        }));
  var number_of_nonterminals = Belt_MapInt.size(G[/* grammar */0][/* nonterminals */0]);
  var get_nonterminal_num = function (param) {
    return Belt_MutableMapInt.getExn(production_nonterminal_map, param);
  };
  var get_nonterminal = function (pn) {
    return Belt_MapInt.getExn(G[/* grammar */0][/* nonterminals */0], Belt_MutableMapInt.getExn(production_nonterminal_map, pn));
  };
  var closure = function (initial_items) {
    var added = Bitstring.alloc(number_of_nonterminals, false);
    var nonkernel_items = Belt_MutableSetInt.make(/* () */0);
    var nt_stack = Belt_MutableSetInt.make(/* () */0);
    Belt_SetInt.forEach(initial_items, (function (item) {
            var match = view_item(item);
            var production = Belt_MutableMapInt.getExn(production_map, match[/* production_num */0]);
            var match$1 = Belt_List.get(production, match[/* position */1]);
            if (match$1 !== undefined) {
              var match$2 = match$1;
              if (match$2.tag) {
                return Belt_MutableSetInt.add(nt_stack, match$2[0]);
              } else {
                return /* () */0;
              }
            } else {
              return /* () */0;
            }
          }));
    while(!Belt_MutableSetInt.isEmpty(nt_stack)) {
      var match = Belt_MutableSetInt.minimum(nt_stack);
      var nonterminal_num = match !== undefined ? match : Pervasives.failwith("invariant violation: the set is not empty!");
      Belt_MutableSetInt.remove(nt_stack, nonterminal_num);
      if (!Bitstring.getExn(added, nonterminal_num)) {
        Bitstring.setExn(added, nonterminal_num, true);
        var production_set = Belt_MutableMapInt.getExn(nonterminal_production_map, nonterminal_num);
        Belt_MutableSetInt.forEach(production_set, (function (production_num) {
                return Belt_MutableSetInt.add(nonkernel_items, mk_item$prime(production_num, 0));
              }));
        var match$1 = Belt_MapInt.getExn(G[/* grammar */0][/* nonterminals */0], nonterminal_num);
        Belt_List.forEach(match$1[/* productions */0], (function (production) {
                if (production) {
                  var match = production[0];
                  if (match.tag) {
                    return Belt_MutableSetInt.add(nt_stack, match[0]);
                  } else {
                    return /* () */0;
                  }
                } else {
                  return Pervasives.failwith("Empty production");
                }
              }));
      }
      
    };
    return /* record */[
            /* kernel_items */initial_items,
            /* nonkernel_items */Belt_SetInt.fromArray(Belt_MutableSetInt.toArray(nonkernel_items))
          ];
  };
  var simplify_config_set = function (param) {
    return Belt_SetInt.union(param[/* kernel_items */0], param[/* nonkernel_items */1]);
  };
  var closure$prime = function (items) {
    return simplify_config_set(closure(items));
  };
  var goto_kernel = function (item_set, symbol) {
    var result = Belt_MutableSetInt.make(/* () */0);
    Belt_SetInt.forEach(item_set, (function (item) {
            var match = view_item(item);
            var position = match[/* position */1];
            var production_num = match[/* production_num */0];
            var production = Belt_MutableMapInt.getExn(production_map, production_num);
            var match$1 = Belt_List.get(production, position);
            if (match$1 !== undefined && Caml_obj.caml_equal(symbol, match$1)) {
              return Belt_MutableSetInt.add(result, mk_item$prime(production_num, position + 1 | 0));
            } else {
              return /* () */0;
            }
          }));
    return Belt_SetInt.fromArray(Belt_MutableSetInt.toArray(result));
  };
  var $$goto = function (item_set, symbol) {
    return closure(goto_kernel(item_set, symbol));
  };
  var goto$prime = function (item_set, symbol) {
    return simplify_config_set(closure(goto_kernel(item_set, symbol)));
  };
  var augmented_start = Belt_SetInt.fromArray(/* array */[mk_item(/* record */[
              /* production_num */0,
              /* position */0
            ])]);
  var ca = simplify_config_set(closure(augmented_start));
  var c = Belt_MutableSet.fromArray(/* array */[ca], ComparableSet);
  var $$continue = /* record */[/* contents */true];
  while($$continue[0]) {
    $$continue[0] = false;
    Belt_MutableSet.forEach(c, (function (i) {
            var grammar_symbols = Belt_List.concat(Belt_List.makeBy(G[/* grammar */0][/* num_terminals */1], (function (n) {
                        return /* Terminal */Block.__(0, [n]);
                      })), Belt_List.makeBy(number_of_nonterminals, (function (n) {
                        return /* Nonterminal */Block.__(1, [n]);
                      })));
            return Belt_List.forEach(grammar_symbols, (function (x) {
                          var goto_i_x = simplify_config_set(closure(goto_kernel(i, x)));
                          if (!Belt_SetInt.isEmpty(goto_i_x) && !Belt_MutableSet.has(c, goto_i_x)) {
                            Belt_MutableSet.add(c, goto_i_x);
                            $$continue[0] = true;
                            return /* () */0;
                          } else {
                            return 0;
                          }
                        }));
          }));
  };
  var items$prime = Belt_MapInt.fromArray(Belt_Array.mapWithIndex(Belt_MutableSet.toArray(c), (function (i, item_set) {
              return /* tuple */[
                      i,
                      item_set
                    ];
            })));
  var state_to_item_set = function (param) {
    return Belt_MapInt.getExn(items$prime, param);
  };
  var item_set_to_state = function (item_set) {
    return Belt_Option.getExn(Belt_MapInt.findFirstBy(items$prime, (function (param, item_set$prime) {
                        return Caml_obj.caml_equal(Belt_SetInt.toArray(item_set$prime), Belt_SetInt.toArray(item_set));
                      })))[0];
  };
  var items = Belt_SetInt.fromArray(/* array */[0]);
  var augmented_state = item_set_to_state(simplify_config_set(closure(items)));
  var in_first_cache = Belt_MutableMap.make(SymbolCmp);
  var stack = Belt_MutableSetInt.make(/* () */0);
  var in_first$prime = function (t_num, sym) {
    var match = Belt_MutableMap.get(in_first_cache, /* tuple */[
          t_num,
          sym
        ]);
    if (match !== undefined) {
      return match;
    } else if (sym.tag) {
      var match$1 = Belt_MapInt.getExn(G[/* grammar */0][/* nonterminals */0], sym[0]);
      var productions = match$1[/* productions */0];
      var match$2 = Util.fold_right((function (param) {
              var match = param[1];
              var found_it = Belt_List.some(productions, (function (param) {
                      if (param) {
                        var nt = param[0];
                        if (nt.tag) {
                          var nt_num = nt[0];
                          if (Belt_MutableSetInt.has(stack, nt_num)) {
                            return false;
                          } else {
                            Belt_MutableSetInt.add(stack, nt_num);
                            var result = in_first$prime(t_num, nt);
                            Belt_MutableSetInt.remove(stack, nt_num);
                            return result;
                          }
                        } else {
                          return nt[0] === t_num;
                        }
                      } else {
                        return false;
                      }
                    }));
              return /* tuple */[
                      match[0] || found_it,
                      match[1] && false
                    ];
            }), productions, /* tuple */[
            false,
            true
          ]);
      var result = match$2[0];
      Belt_MutableMap.set(in_first_cache, /* tuple */[
            t_num,
            sym
          ], result);
      return result;
    } else {
      return sym[0] === t_num;
    }
  };
  var in_first_str = function (t_num, str) {
    if (str) {
      return in_first$prime(t_num, str[0]);
    } else {
      return false;
    }
  };
  var FoundInFollow = Caml_exceptions.create("LrParsing.Lr0(G).FoundInFollow");
  var in_follow$prime$prime = function (nts_visited, t_num, nt_num, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var match = param[0];
        if (match.tag) {
          var rest = param[1];
          if (match[0] === nt_num && in_first_str(t_num, rest)) {
            return true;
          } else {
            _param = rest;
            continue ;
          }
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        return false;
      }
    };
  };
  var in_follow$prime = function (nts_visited, t_num, nt_num) {
    if (Belt_SetInt.has(nts_visited, nt_num)) {
      return false;
    } else if (nt_num === 0) {
      return t_num === 0;
    } else {
      try {
        var nts_visited$prime = Belt_SetInt.add(nts_visited, nt_num);
        Belt_MutableMapInt.forEach(production_map, (function (prod_num, production) {
                if (in_follow$prime$prime(nts_visited$prime, t_num, nt_num, production)) {
                  throw FoundInFollow;
                }
                var nt_num$prime = Belt_MutableMapInt.getExn(production_nonterminal_map, prod_num);
                var match = Util.unsnoc(production);
                var match$1 = match[1];
                if (match$1.tag && match$1[0] === nt_num && in_follow$prime(nts_visited$prime, t_num, nt_num$prime)) {
                  throw FoundInFollow;
                } else {
                  return 0;
                }
              }));
        return false;
      }
      catch (exn){
        if (exn === FoundInFollow) {
          return true;
        } else {
          throw exn;
        }
      }
    }
  };
  var partial_arg = Belt_SetInt.fromArray(/* array */[]);
  var in_follow = function (param, param$1) {
    return in_follow$prime(partial_arg, param, param$1);
  };
  var goto_table = function (state, nt) {
    var item_set = Belt_MapInt.getExn(items$prime, state);
    return item_set_to_state(simplify_config_set(closure(goto_kernel(item_set, nt))));
  };
  var action_table = function (state, terminal_num) {
    var item_set = Belt_MapInt.getExn(items$prime, state);
    var item_set_l = Belt_SetInt.toList(item_set);
    var shift_action = Util.find_by(item_set_l, (function (item) {
            var match = view_item(item);
            var symbols = Belt_MutableMapInt.getExn(production_map, match[/* production_num */0]);
            var match$1 = Belt_List.get(symbols, match[/* position */1]);
            if (match$1 !== undefined) {
              var next_symbol = match$1;
              if (next_symbol.tag || next_symbol[0] !== terminal_num) {
                return undefined;
              } else {
                return /* Shift */Block.__(0, [goto_table(state, next_symbol)]);
              }
            }
            
          }));
    var reduce_action = Util.find_by(item_set_l, (function (item) {
            var match = view_item(item);
            var production_num = match[/* production_num */0];
            var nt_num = Belt_MutableMapInt.getExn(production_nonterminal_map, production_num);
            var production = Belt_MutableMapInt.getExn(production_map, production_num);
            if (match[/* position */1] === Belt_List.length(production) && Curry._2(in_follow, terminal_num, nt_num) && nt_num !== 0) {
              return /* Reduce */Block.__(1, [production_num]);
            }
            
          }));
    var accept_action = terminal_num === 0 && Belt_SetInt.has(item_set, 16777216) ? /* Accept */0 : undefined;
    if (shift_action !== undefined) {
      if (reduce_action !== undefined || accept_action !== undefined) {
        return /* Error */1;
      } else {
        return shift_action;
      }
    } else if (reduce_action !== undefined) {
      if (accept_action !== undefined) {
        return /* Error */1;
      } else {
        return reduce_action;
      }
    } else if (accept_action !== undefined) {
      return accept_action;
    } else {
      return /* Error */1;
    }
  };
  var token_to_terminal = function (param) {
    return Belt_MapString.getExn(G[/* grammar */0][/* terminal_names */2], param[/* name */0]);
  };
  var token_to_symbol = function (param) {
    var name = param[/* name */0];
    var t_match = Belt_MapString.get(G[/* grammar */0][/* terminal_names */2], name);
    var nt_match = Belt_MapString.get(G[/* grammar */0][/* nonterminal_names */3], name);
    if (t_match !== undefined) {
      if (nt_match !== undefined) {
        return Pervasives.failwith("Found both a terminal *and* nonterminal with name " + (name + " (this should never happen)"));
      } else {
        return /* Terminal */Block.__(0, [t_match]);
      }
    } else if (nt_match !== undefined) {
      return /* Nonterminal */Block.__(1, [nt_match]);
    } else {
      return Pervasives.failwith("Failed to find a terminal or nonterminal named " + name);
    }
  };
  var parse = function (toks) {
    var stack = Belt_MutableStack.make(/* () */0);
    Belt_MutableStack.push(stack, augmented_state);
    var results = Belt_MutableStack.make(/* () */0);
    try {
      var a = pop_front_exn(0, toks);
      while(true) {
        var match = Belt_MutableStack.top(stack);
        var s = match !== undefined ? match : Pervasives.failwith("invariant violation: empty stack");
        var tok = a;
        var terminal_num = token_to_terminal(tok);
        var match$1 = action_table(s, terminal_num);
        if (typeof match$1 === "number") {
          if (match$1 === 0) {
            throw ParseFinished;
          } else {
            throw [
                  ParseFailed,
                  /* tuple */[
                    tok[/* start */1],
                    "parse failed -- no valid transition on this token"
                  ]
                ];
          }
        } else if (match$1.tag) {
          var production_num = match$1[0];
          var pop_count = Belt_List.length(Belt_MutableMapInt.getExn(production_map, production_num));
          var children = /* [] */0;
          var start_pos = 0;
          var end_pos = 0;
          for(var i = 1; i <= pop_count; ++i){
            Belt_MutableStack.pop(stack);
            var match$2 = Belt_MutableStack.pop(results);
            if (match$2 !== undefined) {
              var child = match$2;
              children = /* :: */[
                child,
                children
              ];
              if (i === pop_count) {
                start_pos = child[/* start_pos */2];
              }
              if (i === 1) {
                end_pos = child[/* end_pos */3];
              }
              
            } else {
              Pervasives.failwith("invariant violation: popping from empty stack");
            }
          }
          var nt_num = Belt_MutableMapInt.getExn(production_nonterminal_map, production_num);
          var match$3 = Belt_MutableStack.top(stack);
          if (match$3 !== undefined) {
            Belt_MutableStack.push(stack, goto_table(match$3, /* Nonterminal */Block.__(1, [nt_num])));
          } else {
            Pervasives.failwith("invariant violation: peeking empty stack");
          }
          Belt_MutableStack.push(results, /* record */[
                /* symbol : Nonterminal */Block.__(1, [nt_num]),
                /* children */children,
                /* start_pos */start_pos,
                /* end_pos */end_pos
              ]);
        } else {
          Belt_MutableStack.push(stack, match$1[0]);
          Belt_MutableStack.push(results, /* record */[
                /* symbol : Terminal */Block.__(0, [terminal_num]),
                /* children : [] */0,
                /* start_pos */tok[/* start */1],
                /* end_pos */tok[/* finish */2]
              ]);
          a = pop_front_exn(tok[/* start */1], toks);
        }
      };
      return Pervasives.failwith("invariant violation: can't make it here");
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn === ParseFinished) {
        var match$4 = Belt_MutableStack.size(results);
        if (match$4 !== 0) {
          if (match$4 !== 1) {
            return Pervasives.failwith("invariant violation: multiple results");
          } else {
            var match$5 = Belt_MutableStack.top(results);
            if (match$5 !== undefined) {
              return /* Ok */Block.__(0, [match$5]);
            } else {
              return Pervasives.failwith("invariant violation: no result");
            }
          }
        } else {
          return Pervasives.failwith("invariant violation: no result");
        }
      } else if (exn[0] === ParseFailed) {
        return /* Error */Block.__(1, [exn[1]]);
      } else if (exn[0] === PopFailed) {
        return /* Error */Block.__(1, [/* tuple */[
                    exn[1],
                    "parsing invariant violation -- pop failed"
                  ]]);
      } else {
        throw exn;
      }
    }
  };
  var lex_and_parse = function (lexer, input) {
    var match = Lex.lex(lexer, input);
    if (match.tag) {
      return /* Error */Block.__(1, [/* Left */Block.__(0, [match[0]])]);
    } else {
      var len = input.length;
      var toks$prime = Belt_MutableQueue.fromArray(match[0]);
      Belt_MutableQueue.add(toks$prime, /* record */[
            /* name */"$",
            /* start */len,
            /* finish */len
          ]);
      var match$1 = parse(toks$prime);
      if (match$1.tag) {
        return /* Error */Block.__(1, [/* Right */Block.__(1, [match$1[0]])]);
      } else {
        return /* Ok */Block.__(0, [match$1[0]]);
      }
    }
  };
  return /* module */[
          /* production_map */production_map,
          /* production_nonterminal_map */production_nonterminal_map,
          /* nonterminal_production_map */nonterminal_production_map,
          /* production_cnt */production_cnt,
          /* number_of_nonterminals */number_of_nonterminals,
          /* get_nonterminal_num */get_nonterminal_num,
          /* get_nonterminal */get_nonterminal,
          /* closure */closure,
          /* simplify_config_set */simplify_config_set,
          /* closure' */closure$prime,
          /* goto_kernel */goto_kernel,
          /* goto */$$goto,
          /* goto' */goto$prime,
          /* items */c,
          /* items' */items$prime,
          /* state_to_item_set */state_to_item_set,
          /* item_set_to_state */item_set_to_state,
          /* augmented_state */augmented_state,
          /* in_first_cache */in_first_cache,
          /* in_first */in_first$prime,
          /* in_first_str */in_first_str,
          /* end_marker */0,
          /* FoundInFollow */FoundInFollow,
          /* in_follow'' */in_follow$prime$prime,
          /* in_follow' */in_follow$prime,
          /* in_follow */in_follow,
          /* goto_table */goto_table,
          /* action_table */action_table,
          /* token_to_terminal */token_to_terminal,
          /* token_to_symbol */token_to_symbol,
          /* parse */parse,
          /* lex_and_parse */lex_and_parse
        ];
}

var A = 0;

var L = 0;

var M = 0;

var MM = 0;

var MMI = 0;

var S = 0;

var SI = 0;

var SS = 0;

var MS = 0;

var MSI = 0;

var Result = 0;

var MStack = 0;

var MQueue = 0;

exports.A = A;
exports.L = L;
exports.M = M;
exports.MM = MM;
exports.MMI = MMI;
exports.S = S;
exports.SI = SI;
exports.SS = SS;
exports.MS = MS;
exports.MSI = MSI;
exports.Result = Result;
exports.MStack = MStack;
exports.MQueue = MQueue;
exports.SymbolCmp = SymbolCmp;
exports.LookaheadItemCmp = LookaheadItemCmp;
exports.view_item = view_item;
exports.mk_item$prime = mk_item$prime;
exports.mk_item = mk_item;
exports.ComparableSet = ComparableSet;
exports.ParseFinished = ParseFinished;
exports.ParseFailed = ParseFailed;
exports.PopFailed = PopFailed;
exports.pop_front_exn = pop_front_exn;
exports.Lr0 = Lr0;
/* SymbolCmp Not a pure module */
