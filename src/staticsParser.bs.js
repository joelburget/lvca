// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("StaticsParser.MenhirBasics.Error");

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error */false
        ];
}

function _menhir_errorcase(_menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    if (_menhir_s > 10 || _menhir_s < 1) {
      throw $$Error;
    } else {
      __menhir_s = _menhir_stack[1];
      __menhir_stack = _menhir_stack[0];
      continue ;
    }
  };
}

function _menhir_goto_loption_separated_nonempty_list_SEMICOLON_scope__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "staticsParser.ml",
            749,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok === 1) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _v_000 = _menhir_stack[2];
    var _v$1 = /* Term */Block.__(0, [
        _v_000,
        _v
      ]);
    return _menhir_goto_term(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              792,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_fail(param) {
  Printf.fprintf(Pervasives.stderr, /* Format */[
        /* String_literal */Block.__(11, [
            "Internal failure -- please contact the parser generator's developers.\n",
            /* Flush */Block.__(10, [/* End_of_format */0])
          ]),
        "Internal failure -- please contact the parser generator's developers.\n%!"
      ]);
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "staticsParser.ml",
          338,
          4
        ]
      ];
}

function _menhir_run4(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 1 : 
          return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_scope__(_menhir_env$1, _menhir_stack, /* MenhirState4 */9, /* [] */0);
      case 7 : 
          return _menhir_reduce9(_menhir_env$1, _menhir_stack, /* MenhirState4 */9);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 1) {
    return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState4 */9, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              1022,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState4 */9);
  }
  
}

function _menhir_reduce22(_menhir_env, _menhir_stack) {
  var _v = /* Free */Block.__(2, [_menhir_stack[2]]);
  return _menhir_goto_term(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v);
}

function _menhir_run1(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok === 8) {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" || _tok$1.tag !== 1) {
      exit$1 = 2;
    } else {
      return _menhir_run3(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */10, _tok$1[0]);
    }
    if (exit$1 === 2) {
      if (_menhir_env$2[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "staticsParser.ml",
                1059,
                12
              ]
            ];
      }
      _menhir_env$2[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState2 */10);
    }
    
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              1063,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_term(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  switch (_menhir_s) {
    case 0 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "staticsParser.ml",
                  629,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number" && _tok === 6) {
          return _v;
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "staticsParser.ml",
                    690,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 4 : 
        var _v_000 = _menhir_stack[2];
        var _v$1 = /* CheckingRule */[
          _v_000,
          _v
        ];
        var _v$2 = /* CheckingRule */Block.__(1, [_v$1]);
        return _menhir_goto_typingClause(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$2);
    case 5 : 
        var _v_000$1 = _menhir_stack[2];
        var _v$3 = /* InferenceRule */[
          _v_000$1,
          _v
        ];
        var _v$4 = /* InferenceRule */Block.__(0, [_v$3]);
        return _menhir_goto_typingClause(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$4);
    case 6 : 
        var _v_000$2 = _menhir_stack[2];
        var _v$5 = /* Scope */[
          _v_000$2,
          _v
        ];
        return _menhir_goto_scope(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$5);
    case 7 : 
    case 9 : 
        exit = 1;
        break;
    case 10 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "staticsParser.ml",
                  420,
                  10
                ]
              ];
        }
        var _tok$1 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$1 === "number") {
          if (_tok$1 !== 2) {
            if (_tok$1 !== 5) {
              exit$2 = 2;
            } else {
              var _menhir_env$1 = _menhir_discard(_menhir_env);
              var _tok$2 = _menhir_env$1[/* _menhir_token */2];
              var exit$3 = 0;
              if (typeof _tok$2 === "number" || _tok$2.tag !== 1) {
                exit$3 = 3;
              } else {
                return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState24 */4, _tok$2[0]);
              }
              if (exit$3 === 3) {
                if (_menhir_env$1[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "staticsParser.ml",
                          436,
                          16
                        ]
                      ];
                }
                _menhir_env$1[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState24 */4);
              }
              
            }
          } else {
            var _menhir_env$2 = _menhir_discard(_menhir_env);
            var _tok$3 = _menhir_env$2[/* _menhir_token */2];
            var exit$4 = 0;
            if (typeof _tok$3 === "number" || _tok$3.tag !== 1) {
              exit$4 = 3;
            } else {
              return _menhir_run3(_menhir_env$2, _menhir_stack$1, /* MenhirState22 */5, _tok$3[0]);
            }
            if (exit$4 === 3) {
              if (_menhir_env$2[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "staticsParser.ml",
                        452,
                        16
                      ]
                    ];
              }
              _menhir_env$2[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState22 */5);
            }
            
          }
        } else {
          exit$2 = 2;
        }
        if (exit$2 === 2) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "staticsParser.ml",
                    456,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 1 : 
    case 2 : 
    case 3 : 
    case 8 : 
    case 11 : 
        return _menhir_fail(/* () */0);
    
  }
  if (exit === 1) {
    var _v$6 = /* Scope */[
      /* [] */0,
      _v
    ];
    return _menhir_goto_scope(_menhir_env, _menhir_stack, _menhir_s, _v$6);
  }
  
}

function _menhir_run3(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 4 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1);
      case 7 : 
      case 8 : 
          exit = 1;
          break;
      case 0 : 
      case 1 : 
      case 2 : 
      case 3 : 
      case 5 : 
      case 6 : 
      case 9 : 
          return _menhir_reduce22(_menhir_env$1, _menhir_stack$1);
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              1175,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_reduce9(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    /* [] */0
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "staticsParser.ml",
            717,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok === 7) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok$1 = _menhir_env$1[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" || _tok$1.tag !== 1) {
      exit$1 = 2;
    } else {
      return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState16 */6, _tok$1[0]);
    }
    if (exit$1 === 2) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "staticsParser.ml",
                729,
                12
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState16 */6);
    }
    
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              733,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_run5(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
      case 1 : 
          return _menhir_reduce22(_menhir_env$1, _menhir_stack$1);
      case 4 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1);
      case 7 : 
          var __menhir_env = _menhir_env$1;
          var __menhir_stack = _menhir_stack$1;
          while(true) {
            var _menhir_stack$2 = __menhir_stack;
            var _menhir_env$2 = __menhir_env;
            var _menhir_env$3 = _menhir_discard(_menhir_env$2);
            var _tok$1 = _menhir_env$3[/* _menhir_token */2];
            var exit$1 = 0;
            if (typeof _tok$1 === "number" || _tok$1.tag !== 1) {
              exit$1 = 1;
            } else {
              var _menhir_stack_002 = _tok$1[0];
              var _menhir_stack$3 = /* tuple */[
                _menhir_stack$2,
                /* MenhirState6 */8,
                _menhir_stack_002
              ];
              var _menhir_env$4 = _menhir_discard(_menhir_env$3);
              var _tok$2 = _menhir_env$4[/* _menhir_token */2];
              var exit$2 = 0;
              if (typeof _tok$2 === "number" && _tok$2 === 7) {
                __menhir_stack = _menhir_stack$3;
                __menhir_env = _menhir_env$4;
                continue ;
              } else {
                exit$2 = 2;
              }
              if (exit$2 === 2) {
                if (_menhir_env$4[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "staticsParser.ml",
                          320,
                          12
                        ]
                      ];
                }
                _menhir_env$4[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$4, _menhir_stack$2, /* MenhirState6 */8);
              }
              
            }
            if (exit$1 === 1) {
              if (_menhir_env$3[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "staticsParser.ml",
                        331,
                        8
                      ]
                    ];
              }
              _menhir_env$3[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState6 */8);
            }
            
          };
      case 2 : 
      case 3 : 
      case 5 : 
      case 6 : 
      case 8 : 
      case 9 : 
          exit = 1;
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              820,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_reduce5(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_s$1,
      _v
    ];
    var exit = 0;
    switch (_menhir_s$1) {
      case 1 : 
          var _v_000 = _menhir_stack$1[2];
          var _v$1 = /* :: */[
            _v_000,
            _v
          ];
          __v = _v$1;
          __menhir_s = _menhir_stack$1[1];
          __menhir_stack = _menhir_stack$1[0];
          continue ;
      case 0 : 
      case 2 : 
      case 4 : 
      case 5 : 
      case 6 : 
      case 7 : 
      case 8 : 
      case 9 : 
      case 10 : 
          return _menhir_fail(/* () */0);
      case 3 : 
      case 11 : 
          exit = 1;
          break;
      
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "staticsParser.ml",
                838,
                10
              ]
            ];
      }
      var _tok = _menhir_env$1[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok === "number" && _tok === 3) {
        var _menhir_env$2 = _menhir_discard(_menhir_env$1);
        var _tok$1 = _menhir_env$2[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$1 === "number" && _tok$1 >= 9) {
          return _menhir_run1(_menhir_env$2, _menhir_stack$2, /* MenhirState32 */2);
        } else {
          exit$2 = 3;
        }
        if (exit$2 === 3) {
          if (_menhir_env$2[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "staticsParser.ml",
                    850,
                    16
                  ]
                ];
          }
          _menhir_env$2[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$2, _menhir_stack$2, /* MenhirState32 */2);
        }
        
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "staticsParser.ml",
                  854,
                  12
                ]
              ];
        }
        _menhir_env$1[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
      }
      
    }
    
  };
}

function _menhir_reduce7(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 3) {
      if (_menhir_s$1 >= 11) {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "staticsParser.ml",
                  918,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 6) {
          return _v;
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "staticsParser.ml",
                    967,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      } else {
        return _menhir_fail(/* () */0);
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$1 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$1;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_goto_scope(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "staticsParser.ml",
            244,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 1) {
      if (_tok !== 0) {
        exit = 1;
      } else {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number") {
          if (_tok$1 === 7) {
            return _menhir_reduce9(_menhir_env$1, _menhir_stack$1, /* MenhirState13 */7);
          } else {
            exit$1 = 2;
          }
        } else if (_tok$1.tag === 1) {
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState13 */7, _tok$1[0]);
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "staticsParser.ml",
                    262,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState13 */7);
        }
        
      }
    } else {
      var _v$1 = /* :: */[
        _v,
        /* [] */0
      ];
      var _menhir_env$2 = _menhir_env;
      var __menhir_stack = _menhir_stack;
      var __menhir_s = _menhir_s;
      var __v = _v$1;
      while(true) {
        var _v$2 = __v;
        var _menhir_s$1 = __menhir_s;
        var _menhir_stack$2 = __menhir_stack;
        switch (_menhir_s$1) {
          case 7 : 
              var _v_000 = _menhir_stack$2[2];
              var _v$3 = /* :: */[
                _v_000,
                _v$2
              ];
              __v = _v$3;
              __menhir_s = _menhir_stack$2[1];
              __menhir_stack = _menhir_stack$2[0];
              continue ;
          case 8 : 
              return _menhir_fail(/* () */0);
          case 9 : 
              return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_scope__(_menhir_env$2, _menhir_stack$2, _menhir_s$1, _v$2);
          default:
            return _menhir_fail(/* () */0);
        }
      };
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              284,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_typingClause(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_s$1 = _menhir_stack[1];
  var _menhir_stack$1 = _menhir_stack[0];
  var _v$1 = /* tuple */[
    Belt_MapString.empty,
    _v
  ];
  var _menhir_stack$2 = /* tuple */[
    _menhir_stack$1,
    _menhir_s$1,
    _v$1
  ];
  var exit = 0;
  switch (_menhir_s$1) {
    case 2 : 
        var _v_000 = _menhir_stack$1[2];
        var _v$2 = /* Rule */[
          _v_000,
          undefined,
          _v$1
        ];
        var _menhir_stack_000 = _menhir_stack$1[0];
        var _menhir_stack_001 = _menhir_stack$1[1];
        var _menhir_stack$3 = /* tuple */[
          _menhir_stack_000,
          _menhir_stack_001,
          _v$2
        ];
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "staticsParser.ml",
                  197,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 3 : 
                return _menhir_reduce5(_menhir_env, _menhir_stack$3, /* MenhirState29 */3);
            case 6 : 
                return _menhir_reduce7(_menhir_env, _menhir_stack$3, /* MenhirState29 */3);
            case 0 : 
            case 1 : 
            case 2 : 
            case 4 : 
            case 5 : 
            case 7 : 
            case 8 : 
                exit$1 = 2;
                break;
            case 9 : 
                return _menhir_run1(_menhir_env, _menhir_stack$3, /* MenhirState29 */3);
            
          }
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "staticsParser.ml",
                    207,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack$3, /* MenhirState29 */3);
        }
        break;
    case 0 : 
    case 4 : 
    case 5 : 
    case 6 : 
    case 7 : 
    case 8 : 
    case 9 : 
    case 10 : 
        return _menhir_fail(/* () */0);
    case 1 : 
    case 3 : 
    case 11 : 
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              217,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env[/* _menhir_token */2];
    var exit$2 = 0;
    if (typeof _tok$1 === "number") {
      if (_tok$1 !== 3) {
        if (_tok$1 >= 9) {
          return _menhir_run1(_menhir_env, _menhir_stack$2, /* MenhirState34 */1);
        } else {
          exit$2 = 2;
        }
      } else {
        return _menhir_reduce5(_menhir_env, _menhir_stack$2, /* MenhirState34 */1);
      }
    } else {
      exit$2 = 2;
    }
    if (exit$2 === 2) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "staticsParser.ml",
                225,
                12
              ]
            ];
      }
      _menhir_env[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState34 */1);
    }
    
  }
  
}

function _menhir_init(lexer, lexbuf) {
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token : () */0,
          /* _menhir_error */false
        ];
}

function rules(lexer, lexbuf) {
  var _menhir_env = _menhir_init(lexer, lexbuf);
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 3 : 
          return _menhir_reduce5(_menhir_env$1, _menhir_stack, /* MenhirState0 */11);
      case 6 : 
          return _menhir_reduce7(_menhir_env$1, _menhir_stack, /* MenhirState0 */11);
      case 0 : 
      case 1 : 
      case 2 : 
      case 4 : 
      case 5 : 
      case 7 : 
      case 8 : 
          exit = 1;
          break;
      case 9 : 
          return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState0 */11);
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              1227,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState0 */11);
  }
  
}

function term_top(lexer, lexbuf) {
  var _menhir_env = _menhir_init(lexer, lexbuf);
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" || _tok.tag !== 1) {
    exit = 1;
  } else {
    return _menhir_run3(_menhir_env$1, _menhir_stack, /* MenhirState38 */0, _tok[0]);
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "staticsParser.ml",
              1246,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState38 */0);
  }
  
}

exports.$$Error = $$Error;
exports.term_top = term_top;
exports.rules = rules;
/* No side effect */
