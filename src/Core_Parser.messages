core_module: VAR WITH
##
## Ends in an error in state: 1.
##
## definition -> VAR . COLON sort EQ term SEMICOLON [ VAR END ]
##
## The known suffix of the stack is as follows:
## VAR
##

Unexpected token after variable name.

core_module: WITH
##
## Ends in an error in state: 0.
##
## core_module' -> . core_module [ # ]
##
## The known suffix of the stack is as follows:
##
##

Unexpected token. Expected definition.

term_top: BACKSLASH LEFT_PAREN VAR COLON INT RIGHT_PAREN ARROW WITH
##
## Ends in an error in state: 42.
##
## term -> BACKSLASH typed_arg ARROW . term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## BACKSLASH typed_arg ARROW
##

Unexpected token after `->`. Expected a term.

term_top: BACKSLASH LEFT_PAREN VAR COLON INT RIGHT_PAREN WITH
##
## Ends in an error in state: 41.
##
## term -> BACKSLASH typed_arg . ARROW term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## BACKSLASH typed_arg
##

Unexpected token after argument. Expected another argument or `->`.

term_top: BACKSLASH LEFT_PAREN VAR COLON VAR WITH
##
## Ends in an error in state: 38.
##
## typed_arg -> LEFT_PAREN VAR COLON sort . RIGHT_PAREN [ ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN VAR COLON sort
##

Unexpected token after sort. Expected `)`.

term_top: BACKSLASH LEFT_PAREN VAR COLON WITH
##
## Ends in an error in state: 37.
##
## typed_arg -> LEFT_PAREN VAR COLON . sort RIGHT_PAREN [ ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN VAR COLON
##

Unexpected token after `:`. Expected sort.

term_top: BACKSLASH LEFT_PAREN VAR WITH
##
## Ends in an error in state: 36.
##
## typed_arg -> LEFT_PAREN VAR . COLON sort RIGHT_PAREN [ ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN VAR
##

Unexpected token after variable declaration. Expected `:`.

term_top: BACKSLASH LEFT_PAREN WITH
##
## Ends in an error in state: 35.
##
## typed_arg -> LEFT_PAREN . VAR COLON sort RIGHT_PAREN [ ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

Unexpected token after `(`. Expected variable declaration.

term_top: BACKSLASH WITH
##
## Ends in an error in state: 34.
##
## term -> BACKSLASH . typed_arg ARROW term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## BACKSLASH
##

Unexpected token after `\`. Expected an argument list.

term_top: LEFT_BRACKET VAR COMMA WITH
##
## Ends in an error in state: 13.
##
## separated_nonempty_list(COMMA,ast_like) -> ast_like COMMA . separated_nonempty_list(COMMA,ast_like) [ RIGHT_BRACKET ]
##
## The known suffix of the stack is as follows:
## ast_like COMMA
##

Unexpected token after `,`.

term_top: LEFT_BRACKET VAR WITH
##
## Ends in an error in state: 12.
##
## separated_nonempty_list(COMMA,ast_like) -> ast_like . [ RIGHT_BRACKET ]
## separated_nonempty_list(COMMA,ast_like) -> ast_like . COMMA separated_nonempty_list(COMMA,ast_like) [ RIGHT_BRACKET ]
##
## The known suffix of the stack is as follows:
## ast_like
##

Unexpected token in list. Expected `[` or `,`.

term_top: LEFT_BRACKET WITH
##
## Ends in an error in state: 6.
##
## ast_like -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,ast_like)) RIGHT_BRACKET [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN EQ END DOT COMMA BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACKET
##

Unexpected token after `[`.

term_top: LEFT_PAREN VAR WITH
##
## Ends in an error in state: 49.
##
## atomic_core -> LEFT_PAREN term . RIGHT_PAREN [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 44, spurious reduction of production term -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected `)`.

term_top: LEFT_PAREN WITH
##
## Ends in an error in state: 33.
##
## atomic_core -> LEFT_PAREN . term RIGHT_PAREN [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

Unexpected token after `(`. Expected term.

term_top: LET VAR EQ VAR IN WITH
##
## Ends in an error in state: 52.
##
## term -> LET option(REC) VAR EQ term IN . term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET option(REC) VAR EQ term IN
##

Unexpected token after `in`. Expected term.

term_top: LET VAR EQ VAR WITH
##
## Ends in an error in state: 51.
##
## term -> LET option(REC) VAR EQ term . IN term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET option(REC) VAR EQ term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 44, spurious reduction of production term -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected `in`.

term_top: LET VAR EQ WITH
##
## Ends in an error in state: 32.
##
## term -> LET option(REC) VAR EQ . term IN term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET option(REC) VAR EQ
##

Unexpected token after `=`. Expected term.

term_top: LET VAR WITH
##
## Ends in an error in state: 31.
##
## term -> LET option(REC) VAR . EQ term IN term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET option(REC) VAR
##

Unexpected token after variable. Expected `=`.

term_top: LET WITH
##
## Ends in an error in state: 28.
##
## term -> LET . option(REC) VAR EQ term IN term [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET
##

Unexpected token after `let`. Expected variable declaration.

term_top: MATCH VAR SEMICOLON
##
## Ends in an error in state: 54.
##
## atomic_core -> MATCH term . WITH LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 44, spurious reduction of production term -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected `with`.

term_top: MATCH VAR WITH LEFT_BRACE BAR WITH
##
## Ends in an error in state: 58.
##
## atomic_core -> MATCH term WITH LEFT_BRACE option(BAR) . separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH term WITH LEFT_BRACE option(BAR)
##

Unexpected token in match. Expected a list of cases, each starting with `|`.

term_top: MATCH VAR WITH LEFT_BRACE VAR ARROW INT BAR WITH
##
## Ends in an error in state: 65.
##
## separated_nonempty_list(BAR,case_line) -> case_line BAR . separated_nonempty_list(BAR,case_line) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## case_line BAR
##

Unexpected token after `|`. Expected a pattern.

term_top: MATCH VAR WITH LEFT_BRACE VAR ARROW INT WITH
##
## Ends in an error in state: 64.
##
## separated_nonempty_list(BAR,case_line) -> case_line . [ RIGHT_BRACE ]
## separated_nonempty_list(BAR,case_line) -> case_line . BAR separated_nonempty_list(BAR,case_line) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## case_line
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 44, spurious reduction of production term -> nonempty_list(atomic_core) 
## In state 63, spurious reduction of production case_line -> pattern ARROW term 
##

Unexpected token. Expected `|` (beginning another line) or `}` (ending the match).

term_top: MATCH VAR WITH LEFT_BRACE VAR ARROW WITH
##
## Ends in an error in state: 62.
##
## case_line -> pattern ARROW . term [ RIGHT_BRACE BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Unexpected token after `->`. Expected a term.

term_top: MATCH VAR WITH LEFT_BRACE VAR WITH
##
## Ends in an error in state: 61.
##
## case_line -> pattern . ARROW term [ RIGHT_BRACE BAR ]
##
## The known suffix of the stack is as follows:
## pattern
##

Unexpected token after pattenr. Expected `->`.

term_top: MATCH VAR WITH LEFT_BRACE WITH
##
## Ends in an error in state: 56.
##
## atomic_core -> MATCH term WITH LEFT_BRACE . option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH term WITH LEFT_BRACE
##

Unexpected token after `{`. Expected a list of pattern matches.

term_top: MATCH VAR WITH WITH
##
## Ends in an error in state: 55.
##
## atomic_core -> MATCH term WITH . LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH term WITH
##

Unexpected token after `with`. Expected `{`.

term_top: MATCH WITH
##
## Ends in an error in state: 27.
##
## atomic_core -> MATCH . term WITH LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH
##

Unexpected token after `match`. Expected a term.

term_top: OPERATOR_ID VAR DOT WITH
##
## Ends in an error in state: 23.
##
## separated_nonempty_list(DOT,ast_like) -> ast_like DOT . separated_nonempty_list(DOT,ast_like) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like DOT
##

Unexpected token after `.`.

term_top: OPERATOR_ID VAR SEMICOLON WITH
##
## Ends in an error in state: 20.
##
## separated_nonempty_list(SEMICOLON,ast_like_scope) -> ast_like_scope SEMICOLON . separated_nonempty_list(SEMICOLON,ast_like_scope) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like_scope SEMICOLON
##

Unexpected token after `;`. Expected another term.

term_top: OPERATOR_ID VAR WITH
##
## Ends in an error in state: 22.
##
## separated_nonempty_list(DOT,ast_like) -> ast_like . [ SEMICOLON RIGHT_PAREN ]
## separated_nonempty_list(DOT,ast_like) -> ast_like . DOT separated_nonempty_list(DOT,ast_like) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like
##

Unexpected token. Expected `.` or `;`.

term_top: OPERATOR_ID WITH
##
## Ends in an error in state: 5.
##
## ast_like -> OPERATOR_ID . loption(separated_nonempty_list(SEMICOLON,ast_like_scope)) RIGHT_PAREN [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN EQ END DOT COMMA BAR ARROW ]
##
## The known suffix of the stack is as follows:
## OPERATOR_ID
##

Unexpected token after operator id. Expected a list of subterms, followed by `)`.

term_top: VAR RIGHT_BRACKET
##
## Ends in an error in state: 45.
##
## nonempty_list(atomic_core) -> atomic_core . [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
## nonempty_list(atomic_core) -> atomic_core . nonempty_list(atomic_core) [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## atomic_core
##

Unexpected token after term.

term_top: VAR WITH
##
## Ends in an error in state: 77.
##
## term_top -> term . END [ # ]
##
## The known suffix of the stack is as follows:
## term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 44, spurious reduction of production term -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected end of file.

term_top: WITH
##
## Ends in an error in state: 75.
##
## term_top' -> . term_top [ # ]
##
## The known suffix of the stack is as follows:
##
##

Unexpected token. Expected a term.

