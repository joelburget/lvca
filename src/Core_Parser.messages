dynamics: VAR EQ INT SEMICOLON WITH
##
## Ends in an error in state: 75.
##
## nonempty_list(definition) -> definition . [ END ]
## nonempty_list(definition) -> definition . nonempty_list(definition) [ END ]
##
## The known suffix of the stack is as follows:
## definition
##

Unexpected token after definition.

dynamics: VAR EQ INT WITH
##
## Ends in an error in state: 70.
##
## definition -> VAR EQ core . SEMICOLON [ VAR END ]
##
## The known suffix of the stack is as follows:
## VAR EQ core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 39, spurious reduction of production core -> nonempty_list(atomic_core) 
##

Unexpected token after definition (expected `;`).

dynamics: VAR EQ WITH
##
## Ends in an error in state: 69.
##
## definition -> VAR EQ . core SEMICOLON [ VAR END ]
##
## The known suffix of the stack is as follows:
## VAR EQ
##

Unexpected token after `=`. Expected definition.

dynamics: VAR WITH
##
## Ends in an error in state: 68.
##
## definition -> VAR . EQ core SEMICOLON [ VAR END ]
##
## The known suffix of the stack is as follows:
## VAR
##

Unexpected token after variable name.

dynamics: WITH
##
## Ends in an error in state: 67.
##
## dynamics' -> . dynamics [ # ]
##
## The known suffix of the stack is as follows:
##
##

Unexpected token. Expected definition.

core_top: BACKSLASH LEFT_PAREN VAR COLON INT RIGHT_PAREN ARROW WITH
##
## Ends in an error in state: 38.
##
## core -> BACKSLASH nonempty_list(typed_arg) ARROW . core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## BACKSLASH nonempty_list(typed_arg) ARROW
##

Unexpected token after `->`. Expected a term.

core_top: BACKSLASH LEFT_PAREN VAR COLON INT RIGHT_PAREN WITH
##
## Ends in an error in state: 35.
##
## nonempty_list(typed_arg) -> typed_arg . [ ARROW ]
## nonempty_list(typed_arg) -> typed_arg . nonempty_list(typed_arg) [ ARROW ]
##
## The known suffix of the stack is as follows:
## typed_arg
##

Unexpected token after argument. Expected another argument or `->`.

core_top: BACKSLASH LEFT_PAREN VAR COLON VAR WITH
##
## Ends in an error in state: 32.
##
## typed_arg -> LEFT_PAREN VAR COLON sort . RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN VAR COLON sort
##

Unexpected token after sort. Expected `)`.

core_top: BACKSLASH LEFT_PAREN VAR COLON WITH
##
## Ends in an error in state: 31.
##
## typed_arg -> LEFT_PAREN VAR COLON . sort RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN VAR COLON
##

Unexpected token after `:`. Expected sort.

core_top: BACKSLASH LEFT_PAREN VAR WITH
##
## Ends in an error in state: 30.
##
## typed_arg -> LEFT_PAREN VAR . COLON sort RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN VAR
##

Unexpected token after variable declaration. Expected `:`.

core_top: BACKSLASH LEFT_PAREN WITH
##
## Ends in an error in state: 29.
##
## typed_arg -> LEFT_PAREN . VAR COLON sort RIGHT_PAREN [ LEFT_PAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

Unexpected token after `(`. Expected variable declaration.

core_top: BACKSLASH WITH
##
## Ends in an error in state: 28.
##
## core -> BACKSLASH . nonempty_list(typed_arg) ARROW core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## BACKSLASH
##

Unexpected token after `\`. Expected an argument list.

core_top: LEFT_BRACKET VAR COMMA WITH
##
## Ends in an error in state: 11.
##
## separated_nonempty_list(COMMA,ast_like) -> ast_like COMMA . separated_nonempty_list(COMMA,ast_like) [ RIGHT_BRACKET ]
##
## The known suffix of the stack is as follows:
## ast_like COMMA
##

Unexpected token after `,`.

core_top: LEFT_BRACKET VAR WITH
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,ast_like) -> ast_like . [ RIGHT_BRACKET ]
## separated_nonempty_list(COMMA,ast_like) -> ast_like . COMMA separated_nonempty_list(COMMA,ast_like) [ RIGHT_BRACKET ]
##
## The known suffix of the stack is as follows:
## ast_like
##

Unexpected token in list. Expected `[` or `,`.

core_top: LEFT_BRACKET WITH
##
## Ends in an error in state: 4.
##
## ast_like -> LEFT_BRACKET . loption(separated_nonempty_list(COMMA,ast_like)) RIGHT_BRACKET [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END DOT COMMA BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACKET
##

Unexpected token after `[`.

core_top: LEFT_PAREN VAR WITH
##
## Ends in an error in state: 45.
##
## atomic_core -> LEFT_PAREN core . RIGHT_PAREN [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 39, spurious reduction of production core -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected `)`.

core_top: LEFT_PAREN WITH
##
## Ends in an error in state: 27.
##
## atomic_core -> LEFT_PAREN . core RIGHT_PAREN [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

Unexpected token after `(`. Expected term.

core_top: LET VAR EQ VAR IN WITH
##
## Ends in an error in state: 48.
##
## core -> LET VAR EQ core IN . core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ core IN
##

Unexpected token after `in`. Expected term.

core_top: LET VAR EQ VAR WITH
##
## Ends in an error in state: 47.
##
## core -> LET VAR EQ core . IN core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 39, spurious reduction of production core -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected `in`.

core_top: LET VAR EQ WITH
##
## Ends in an error in state: 26.
##
## core -> LET VAR EQ . core IN core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ
##

Unexpected token after `=`. Expected term.

core_top: LET VAR WITH
##
## Ends in an error in state: 25.
##
## core -> LET VAR . EQ core IN core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET VAR
##

Unexpected token after variable. Expected `=`.

core_top: LET WITH
##
## Ends in an error in state: 24.
##
## core -> LET . VAR EQ core IN core [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## LET
##

Unexpected token after `let`. Expected variable declaration.

core_top: MATCH VAR SEMICOLON
##
## Ends in an error in state: 50.
##
## atomic_core -> MATCH core . WITH LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 39, spurious reduction of production core -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected `with`.

core_top: MATCH VAR WITH LEFT_BRACE BAR WITH
##
## Ends in an error in state: 54.
##
## atomic_core -> MATCH core WITH LEFT_BRACE option(BAR) . separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH core WITH LEFT_BRACE option(BAR)
##

Unexpected token in match. Expected a list of cases, each starting with `|`.

core_top: MATCH VAR WITH LEFT_BRACE VAR ARROW INT BAR WITH
##
## Ends in an error in state: 61.
##
## separated_nonempty_list(BAR,case_line) -> case_line BAR . separated_nonempty_list(BAR,case_line) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## case_line BAR
##

Unexpected token after `|`. Expected a pattern.

core_top: MATCH VAR WITH LEFT_BRACE VAR ARROW INT WITH
##
## Ends in an error in state: 60.
##
## separated_nonempty_list(BAR,case_line) -> case_line . [ RIGHT_BRACE ]
## separated_nonempty_list(BAR,case_line) -> case_line . BAR separated_nonempty_list(BAR,case_line) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## case_line
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 39, spurious reduction of production core -> nonempty_list(atomic_core) 
## In state 59, spurious reduction of production case_line -> pattern ARROW core 
##

Unexpected token. Expected `|` (beginning another line) or `}` (ending the match).

core_top: MATCH VAR WITH LEFT_BRACE VAR ARROW WITH
##
## Ends in an error in state: 58.
##
## case_line -> pattern ARROW . core [ RIGHT_BRACE BAR ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Unexpected token after `->`. Expected a term.

core_top: MATCH VAR WITH LEFT_BRACE VAR WITH
##
## Ends in an error in state: 57.
##
## case_line -> pattern . ARROW core [ RIGHT_BRACE BAR ]
##
## The known suffix of the stack is as follows:
## pattern
##

Unexpected token after pattenr. Expected `->`.

core_top: MATCH VAR WITH LEFT_BRACE WITH
##
## Ends in an error in state: 52.
##
## atomic_core -> MATCH core WITH LEFT_BRACE . option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH core WITH LEFT_BRACE
##

Unexpected token after `{`. Expected a list of pattern matches.

core_top: MATCH VAR WITH WITH
##
## Ends in an error in state: 51.
##
## atomic_core -> MATCH core WITH . LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH core WITH
##

Unexpected token after `with`. Expected `{`.

core_top: MATCH WITH
##
## Ends in an error in state: 23.
##
## atomic_core -> MATCH . core WITH LEFT_BRACE option(BAR) separated_nonempty_list(BAR,case_line) RIGHT_BRACE [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END BAR ]
##
## The known suffix of the stack is as follows:
## MATCH
##

Unexpected token after `match`. Expected a term.

core_top: OPERATOR_ID VAR DOT WITH
##
## Ends in an error in state: 21.
##
## separated_nonempty_list(DOT,ast_like) -> ast_like DOT . separated_nonempty_list(DOT,ast_like) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like DOT
##

Unexpected token after `.`.

core_top: OPERATOR_ID VAR SEMICOLON WITH
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(SEMICOLON,ast_like_scope) -> ast_like_scope SEMICOLON . separated_nonempty_list(SEMICOLON,ast_like_scope) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like_scope SEMICOLON
##

Unexpected token after `;`. Expected another term.

core_top: OPERATOR_ID VAR WITH
##
## Ends in an error in state: 20.
##
## separated_nonempty_list(DOT,ast_like) -> ast_like . [ SEMICOLON RIGHT_PAREN ]
## separated_nonempty_list(DOT,ast_like) -> ast_like . DOT separated_nonempty_list(DOT,ast_like) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ast_like
##

Unexpected token. Expected `.` or `;`.

core_top: OPERATOR_ID WITH
##
## Ends in an error in state: 3.
##
## ast_like -> OPERATOR_ID . loption(separated_nonempty_list(SEMICOLON,ast_like_scope)) RIGHT_PAREN [ WITH VAR STRING SEMICOLON RIGHT_PAREN RIGHT_BRACKET RIGHT_BRACE OPERATOR_ID MATCH LEFT_PAREN LEFT_BRACKET INT IN END DOT COMMA BAR ARROW ]
##
## The known suffix of the stack is as follows:
## OPERATOR_ID
##

Unexpected token after operator id. Expected a list of subterms, followed by `)`.

core_top: VAR RIGHT_BRACKET
##
## Ends in an error in state: 41.
##
## nonempty_list(atomic_core) -> atomic_core . [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
## nonempty_list(atomic_core) -> atomic_core . nonempty_list(atomic_core) [ WITH SEMICOLON RIGHT_PAREN RIGHT_BRACE IN END BAR ]
##
## The known suffix of the stack is as follows:
## atomic_core
##

Unexpected token after term.

core_top: VAR WITH
##
## Ends in an error in state: 65.
##
## core_top -> core . END [ # ]
##
## The known suffix of the stack is as follows:
## core
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 41, spurious reduction of production nonempty_list(atomic_core) -> atomic_core 
## In state 39, spurious reduction of production core -> nonempty_list(atomic_core) 
##

Unexpected token after term. Expected end of file.

core_top: WITH
##
## Ends in an error in state: 0.
##
## core_top' -> . core_top [ # ]
##
## The known suffix of the stack is as follows:
##
##

Unexpected token. Expected a term.

