regex: BACKSLASH NUMBER_CHAR
##
## Ends in an error in state: 27.
##
## char -> BACKSLASH . LEFT_BRACKET [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . RIGHT_BRACKET [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . LEFT_BRACE [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . RIGHT_BRACE [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . LEFT_PAREN [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . RIGHT_PAREN [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . BACKSLASH [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . DOT [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . BAR [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . STAR [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . PLUS [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## char -> BACKSLASH . QUESTION [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## re_class -> BACKSLASH . OTHER_CHAR [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## BACKSLASH
##

Unexpected character after `\`.

regex: LEFT_BRACKET BACKSLASH OTHER_CHAR
##
## Ends in an error in state: 5.
##
## char -> BACKSLASH . LEFT_BRACKET [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . RIGHT_BRACKET [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . LEFT_BRACE [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . RIGHT_BRACE [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . LEFT_PAREN [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . RIGHT_PAREN [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . BACKSLASH [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . DOT [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . BAR [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . STAR [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . PLUS [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
## char -> BACKSLASH . QUESTION [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR DASH BACKSLASH ]
##
## The known suffix of the stack is as follows:
## BACKSLASH
##

Unexpected character after `\`.

regex: LEFT_BRACKET OTHER_CHAR DASH NUMBER_CHAR STAR
##
## Ends in an error in state: 19.
##
## list(character_set_elem) -> character_set_elem . list(character_set_elem) [ RIGHT_BRACKET ]
##
## The known suffix of the stack is as follows:
## character_set_elem
##

Invalid character set element.

regex: LEFT_BRACKET OTHER_CHAR DASH STAR
##
## Ends in an error in state: 22.
##
## character_set_elem -> char DASH . char [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## char DASH
##

Unexpected character after `-`.

regex: LEFT_BRACKET OTHER_CHAR STAR
##
## Ends in an error in state: 21.
##
## character_set_elem -> char . [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR BACKSLASH ]
## character_set_elem -> char . DASH char [ RIGHT_BRACKET OTHER_CHAR NUMBER_CHAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## char
##

Unexpected character set.

regex: LEFT_BRACKET STAR
##
## Ends in an error in state: 4.
##
## prec2_re -> LEFT_BRACKET . character_set RIGHT_BRACKET [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACKET
##

Invalid character set element.

regex: LEFT_PAREN OTHER_CHAR EOF
##
## Ends in an error in state: 47.
##
## prec3_re -> LEFT_PAREN prec0_re . RIGHT_PAREN [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN prec0_re
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production nonempty_list(prec2_re) -> prec2_re
## In state 46, spurious reduction of production prec1_re -> nonempty_list(prec2_re)
## In state 43, spurious reduction of production separated_nonempty_list(BAR,prec1_re) -> prec1_re
## In state 29, spurious reduction of production prec0_re -> separated_nonempty_list(BAR,prec1_re)
##

Expected a `)` after regex.

regex: LEFT_PAREN STAR
##
## Ends in an error in state: 3.
##
## prec3_re -> LEFT_PAREN . prec0_re RIGHT_PAREN [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

Expected a valid regex after `(`.

regex: OTHER_CHAR BAR STAR
##
## Ends in an error in state: 44.
##
## separated_nonempty_list(BAR,prec1_re) -> prec1_re BAR . separated_nonempty_list(BAR,prec1_re) [ RIGHT_PAREN EOF ]
##
## The known suffix of the stack is as follows:
## prec1_re BAR
##

Expected a valid regex after `|`.

regex: OTHER_CHAR LEFT_BRACE NUMBER_CHAR STAR
##
## Ends in an error in state: 37.
##
## list(NUMBER_CHAR) -> NUMBER_CHAR . list(NUMBER_CHAR) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## NUMBER_CHAR
##

Expected `}` after count.

regex: OTHER_CHAR LEFT_BRACE STAR
##
## Ends in an error in state: 36.
##
## prec2_re -> prec2_re LEFT_BRACE . list(NUMBER_CHAR) RIGHT_BRACE [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## prec2_re LEFT_BRACE
##

Expected count after `{`.

regex: OTHER_CHAR RIGHT_BRACKET
##
## Ends in an error in state: 32.
##
## nonempty_list(prec2_re) -> prec2_re . [ RIGHT_PAREN EOF BAR ]
## nonempty_list(prec2_re) -> prec2_re . nonempty_list(prec2_re) [ RIGHT_PAREN EOF BAR ]
## prec2_re -> prec2_re . STAR [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## prec2_re -> prec2_re . PLUS [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## prec2_re -> prec2_re . LEFT_BRACE list(NUMBER_CHAR) RIGHT_BRACE [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
## prec2_re -> prec2_re . QUESTION [ STAR RIGHT_PAREN QUESTION PLUS OTHER_CHAR NUMBER_CHAR LEFT_PAREN LEFT_BRACKET LEFT_BRACE EOF DOT BAR BACKSLASH ]
##
## The known suffix of the stack is as follows:
## prec2_re
##

Unexpected character after regex.

regex: OTHER_CHAR RIGHT_PAREN
##
## Ends in an error in state: 50.
##
## regex -> prec0_re . EOF [ # ]
##
## The known suffix of the stack is as follows:
## prec0_re
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production nonempty_list(prec2_re) -> prec2_re
## In state 46, spurious reduction of production prec1_re -> nonempty_list(prec2_re)
## In state 43, spurious reduction of production separated_nonempty_list(BAR,prec1_re) -> prec1_re
## In state 29, spurious reduction of production prec0_re -> separated_nonempty_list(BAR,prec1_re)
##

Unexpected character after regex.

regex: STAR
##
## Ends in an error in state: 0.
##
## regex' -> . regex [ # ]
##
## The known suffix of the stack is as follows:
##
##

Invalid regex.

