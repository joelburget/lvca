// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("DynamicsParser.MenhirBasics.Error");

function _menhir_errorcase(_menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    if (_menhir_s >= 19) {
      throw $$Error;
    } else {
      __menhir_s = _menhir_stack[1];
      __menhir_stack = _menhir_stack[0];
      continue ;
    }
  };
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error */false
        ];
}

function _menhir_reduce16(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_env;
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 0) {
      if (_menhir_s$1 >= 19) {
        if (_menhir_env$1[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1778,
                  10
                ]
              ];
        }
        var _tok = _menhir_env$1[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 9) {
          return /* DenotationChart */[_v];
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    1827,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, _menhir_s$1);
        }
        
      } else {
        return _menhir_fail(/* () */0);
      }
    } else {
      var _v_000 = _menhir_stack$1[2];
      var _v$1 = /* :: */[
        _v_000,
        _v
      ];
      __v = _v$1;
      __menhir_s = _menhir_stack$1[1];
      __menhir_stack = _menhir_stack$1[0];
      continue ;
    }
  };
}

function _menhir_run1(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */18);
      case 13 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */18);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 2) {
    return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */18, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              2095,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState1 */18);
  }
  
}

function _menhir_goto_core_pat(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  if (_menhir_s >= 7) {
    return _menhir_fail(/* () */0);
  } else {
    switch (_menhir_s) {
      case 0 : 
      case 1 : 
      case 3 : 
          return _menhir_fail(/* () */0);
      case 4 : 
      case 5 : 
          exit = 1;
          break;
      case 2 : 
      case 6 : 
          exit = 2;
          break;
      
    }
  }
  switch (exit) {
    case 1 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  191,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok === "number") {
          switch (_tok) {
            case 1 : 
                var _menhir_env$1 = _menhir_discard(_menhir_env);
                var _tok$1 = _menhir_env$1[/* _menhir_token */2];
                if (typeof _tok$1 === "number") {
                  switch (_tok$1) {
                    case 0 : 
                        return _menhir_run48(_menhir_env$1, _menhir_stack$1, /* MenhirState59 */4);
                    case 11 : 
                        return _menhir_run53(_menhir_env$1, _menhir_stack$1, /* MenhirState59 */4);
                    default:
                      if (_menhir_env$1[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "dynamicsParser.ml",
                                211,
                                16
                              ]
                            ];
                      }
                      _menhir_env$1[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState59 */4);
                  }
                } else {
                  switch (_tok$1.tag | 0) {
                    case 0 : 
                        return _menhir_run49(_menhir_env$1, _menhir_stack$1, /* MenhirState59 */4, _tok$1[0]);
                    case 1 : 
                        return _menhir_run50(_menhir_env$1, _menhir_stack$1, /* MenhirState59 */4, _tok$1[0]);
                    case 2 : 
                        return _menhir_run51(_menhir_env$1, _menhir_stack$1, /* MenhirState59 */4, _tok$1[0]);
                    
                  }
                }
            case 2 : 
                exit$1 = 3;
                break;
            case 3 : 
                var _v$1 = /* :: */[
                  _v,
                  /* [] */0
                ];
                var _menhir_env$2 = _menhir_env;
                var __menhir_stack = _menhir_stack;
                var __menhir_s = _menhir_s;
                var __v = _v$1;
                while(true) {
                  var _v$2 = __v;
                  var _menhir_s$1 = __menhir_s;
                  var _menhir_stack$2 = __menhir_stack;
                  if (_menhir_s$1 !== 4) {
                    if (_menhir_s$1 !== 5) {
                      return _menhir_fail(/* () */0);
                    } else {
                      return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_core_pat__(_menhir_env$2, _menhir_stack$2, _menhir_s$1, _v$2);
                    }
                  } else {
                    var _v_000 = _menhir_stack$2[2];
                    var _v$3 = /* :: */[
                      _v_000,
                      _v$2
                    ];
                    __v = _v$3;
                    __menhir_s = _menhir_stack$2[1];
                    __menhir_stack = _menhir_stack$2[0];
                    continue ;
                  }
                };
            default:
              exit$1 = 3;
          }
        } else {
          exit$1 = 3;
        }
        if (exit$1 === 3) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    225,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 2 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  234,
                  10
                ]
              ];
        }
        var _tok$2 = _menhir_env[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$2 === "number" && _tok$2 === 2) {
          var _menhir_env$3 = _menhir_discard(_menhir_env);
          var _tok$3 = _menhir_env$3[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$3 === "number") {
            switch (_tok$3) {
              case 6 : 
                  return _menhir_run27(_menhir_env$3, _menhir_stack$1, /* MenhirState65 */3);
              case 7 : 
                  return _menhir_run30(_menhir_env$3, _menhir_stack$1, /* MenhirState65 */3);
              case 12 : 
                  return _menhir_run33(_menhir_env$3, _menhir_stack$1, /* MenhirState65 */3);
              case 13 : 
                  return _menhir_run36(_menhir_env$3, _menhir_stack$1, /* MenhirState65 */3);
              default:
                exit$3 = 4;
            }
          } else if (_tok$3.tag === 2) {
            return _menhir_run35(_menhir_env$3, _menhir_stack$1, /* MenhirState65 */3, _tok$3[0]);
          } else {
            exit$3 = 4;
          }
          if (exit$3 === 4) {
            if (_menhir_env$3[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      254,
                      16
                    ]
                  ];
            }
            _menhir_env$3[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState65 */3);
          }
          
        } else {
          exit$2 = 3;
        }
        if (exit$2 === 3) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    258,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    
  }
}

function _menhir_goto_pat(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  if (_menhir_s >= 13) {
    switch (_menhir_s - 13 | 0) {
      case 0 : 
          var _v_000 = _menhir_stack[2];
          var _v$1 = /* DenotationScopePat */[
            _v_000,
            _v
          ];
          return _menhir_goto_scope_pat(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$1);
      case 1 : 
      case 2 : 
      case 4 : 
          exit = 1;
          break;
      case 5 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    1585,
                    10
                  ]
                ];
          }
          var _tok = _menhir_env[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok === "number" && _tok === 4) {
            var _menhir_env$1 = _menhir_discard(_menhir_env);
            var _tok$1 = _menhir_env$1[/* _menhir_token */2];
            var exit$2 = 0;
            if (typeof _tok$1 === "number" && _tok$1 === 8) {
              var _menhir_env$2 = _menhir_discard(_menhir_env$1);
              var _tok$2 = _menhir_env$2[/* _menhir_token */2];
              var exit$3 = 0;
              if (typeof _tok$2 === "number") {
                switch (_tok$2) {
                  case 6 : 
                      return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState26 */12);
                  case 7 : 
                      return _menhir_run30(_menhir_env$2, _menhir_stack$1, /* MenhirState26 */12);
                  case 12 : 
                      return _menhir_run33(_menhir_env$2, _menhir_stack$1, /* MenhirState26 */12);
                  case 13 : 
                      return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState26 */12);
                  default:
                    exit$3 = 4;
                }
              } else if (_tok$2.tag === 2) {
                return _menhir_run35(_menhir_env$2, _menhir_stack$1, /* MenhirState26 */12, _tok$2[0]);
              } else {
                exit$3 = 4;
              }
              if (exit$3 === 4) {
                if (_menhir_env$2[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "dynamicsParser.ml",
                          1619,
                          20
                        ]
                      ];
                }
                _menhir_env$2[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState26 */12);
              }
              
            } else {
              exit$2 = 3;
            }
            if (exit$2 === 3) {
              if (_menhir_env$1[/* _menhir_error */3]) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "dynamicsParser.ml",
                        1623,
                        16
                      ]
                    ];
              }
              _menhir_env$1[/* _menhir_error */3] = true;
              return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
            }
            
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      1634,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 3 : 
      case 6 : 
          return _menhir_fail(/* () */0);
      
    }
  } else {
    return _menhir_fail(/* () */0);
  }
  if (exit === 1) {
    var _v$2 = /* DenotationScopePat */[
      /* [] */0,
      _v
    ];
    return _menhir_goto_scope_pat(_menhir_env, _menhir_stack, _menhir_s, _v$2);
  }
  
}

function _menhir_run33(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" && _tok === 5) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number") {
        switch (_tok$1) {
          case 6 : 
              return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState34 */10);
          case 7 : 
              return _menhir_run30(_menhir_env$2, _menhir_stack$1, /* MenhirState34 */10);
          case 12 : 
              __menhir_s = /* MenhirState34 */10;
              __menhir_stack = _menhir_stack$1;
              __menhir_env = _menhir_env$2;
              continue ;
          case 13 : 
              return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState34 */10);
          default:
            exit$1 = 2;
        }
      } else if (_tok$1.tag === 2) {
        return _menhir_run35(_menhir_env$2, _menhir_stack$1, /* MenhirState34 */10, _tok$1[0]);
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1280,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState34 */10);
      }
      
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1284,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
    }
    
  };
}

function _menhir_run27(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" || _tok.tag !== 2) {
    exit = 1;
  } else {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 4) {
      var _menhir_env$3 = _menhir_discard(_menhir_env$2);
      var _v = /* Metavar */Block.__(5, [_tok[0]]);
      return _menhir_goto_core(_menhir_env$3, _menhir_stack, _menhir_s, _v);
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (_menhir_env$2[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1169,
                12
              ]
            ];
      }
      _menhir_env$2[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$2, _menhir_stack, _menhir_s);
    }
    
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              1180,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_run36(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" && _tok === 5) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number") {
        switch (_tok$1) {
          case 6 : 
              return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState37 */9);
          case 7 : 
              return _menhir_run30(_menhir_env$2, _menhir_stack$1, /* MenhirState37 */9);
          case 12 : 
              return _menhir_run33(_menhir_env$2, _menhir_stack$1, /* MenhirState37 */9);
          case 13 : 
              __menhir_s = /* MenhirState37 */9;
              __menhir_stack = _menhir_stack$1;
              __menhir_env = _menhir_env$2;
              continue ;
          default:
            exit$1 = 2;
        }
      } else if (_tok$1.tag === 2) {
        return _menhir_run35(_menhir_env$2, _menhir_stack$1, /* MenhirState37 */9, _tok$1[0]);
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1314,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState37 */9);
      }
      
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1318,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
    }
    
  };
}

function _menhir_run30(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" && _tok === 5) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number") {
        switch (_tok$1) {
          case 6 : 
              return _menhir_run27(_menhir_env$2, _menhir_stack$1, /* MenhirState31 */11);
          case 7 : 
              __menhir_s = /* MenhirState31 */11;
              __menhir_stack = _menhir_stack$1;
              __menhir_env = _menhir_env$2;
              continue ;
          case 12 : 
              return _menhir_run33(_menhir_env$2, _menhir_stack$1, /* MenhirState31 */11);
          case 13 : 
              return _menhir_run36(_menhir_env$2, _menhir_stack$1, /* MenhirState31 */11);
          default:
            exit$1 = 2;
        }
      } else if (_tok$1.tag === 2) {
        var _menhir_stack_002 = _tok$1[0];
        var _menhir_stack$2 = /* tuple */[
          _menhir_stack$1,
          /* MenhirState31 */11,
          _menhir_stack_002
        ];
        var _menhir_env$3 = _menhir_discard(_menhir_env$2);
        var _tok$2 = _menhir_env$3[/* _menhir_token */2];
        var exit$2 = 0;
        if (typeof _tok$2 === "number") {
          if (_tok$2 !== 3) {
            if (_tok$2 !== 10) {
              exit$2 = 3;
            } else {
              return _menhir_run6(_menhir_env$3, _menhir_stack$2);
            }
          } else {
            return _menhir_reduce4(_menhir_env$3, _menhir_stack$2);
          }
        } else {
          exit$2 = 3;
        }
        if (exit$2 === 3) {
          if (_menhir_env$3[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    1221,
                    16
                  ]
                ];
          }
          _menhir_env$3[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState31 */11);
        }
        
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1236,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState31 */11);
      }
      
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1240,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
    }
    
  };
}

function _menhir_run35(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_reduce4(_menhir_env$1, _menhir_stack$1);
}

function _menhir_run48(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_core_pat(_menhir_env$1, _menhir_stack, _menhir_s, /* PatternVar */Block.__(1, [undefined]));
}

function _menhir_run53(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_core_pat(_menhir_env$1, _menhir_stack, _menhir_s, /* PatternDefault */0);
}

function _menhir_run49(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* PrimString */Block.__(1, [_v]);
  return _menhir_goto_prim(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_fail(param) {
  Printf.fprintf(Pervasives.stderr, /* Format */[
        /* String_literal */Block.__(11, [
            "Internal failure -- please contact the parser generator's developers.\n",
            /* Flush */Block.__(10, [/* End_of_format */0])
          ]),
        "Internal failure -- please contact the parser generator's developers.\n%!"
      ]);
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "dynamicsParser.ml",
          1514,
          4
        ]
      ];
}

function _menhir_run50(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* PrimInteger */Block.__(0, [_v]);
  return _menhir_goto_prim(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run51(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" && _tok < 6) {
      switch (_tok) {
        case 1 : 
        case 2 : 
        case 3 : 
            exit = 2;
            break;
        case 0 : 
        case 4 : 
            exit = 1;
            break;
        case 5 : 
            var _menhir_env$2 = _menhir_discard(_menhir_env$1);
            var _tok$1 = _menhir_env$2[/* _menhir_token */2];
            if (typeof _tok$1 === "number") {
              switch (_tok$1) {
                case 0 : 
                    return _menhir_run48(_menhir_env$2, _menhir_stack$1, /* MenhirState52 */5);
                case 3 : 
                    return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_core_pat__(_menhir_env$2, _menhir_stack$1, /* MenhirState52 */5, /* [] */0);
                case 11 : 
                    return _menhir_run53(_menhir_env$2, _menhir_stack$1, /* MenhirState52 */5);
                default:
                  if (_menhir_env$2[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "dynamicsParser.ml",
                            474,
                            12
                          ]
                        ];
                  }
                  _menhir_env$2[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState52 */5);
              }
            } else {
              switch (_tok$1.tag | 0) {
                case 0 : 
                    return _menhir_run49(_menhir_env$2, _menhir_stack$1, /* MenhirState52 */5, _tok$1[0]);
                case 1 : 
                    return _menhir_run50(_menhir_env$2, _menhir_stack$1, /* MenhirState52 */5, _tok$1[0]);
                case 2 : 
                    __v = _tok$1[0];
                    __menhir_s = /* MenhirState52 */5;
                    __menhir_stack = _menhir_stack$1;
                    __menhir_env = _menhir_env$2;
                    continue ;
                
              }
            }
        
      }
    } else {
      exit = 1;
    }
    switch (exit) {
      case 1 : 
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    496,
                    8
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
      case 2 : 
          var _v$1 = /* PatternVar */Block.__(1, [_v]);
          return _menhir_goto_core_pat(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
      
    }
  };
}

function _menhir_goto_loption_separated_nonempty_list_SEMICOLON_scope_pat__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  switch (_menhir_s) {
    case 15 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1376,
                  10
                ]
              ];
        }
        var _tok = _menhir_env[/* _menhir_token */2];
        var exit = 0;
        if (typeof _tok === "number" && _tok === 3) {
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _v$1 = /* DPatternTm */Block.__(0, [
              "app",
              _v
            ]);
          return _menhir_goto_pat(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    1405,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case 16 : 
        return _menhir_fail(/* () */0);
    case 17 : 
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1418,
                  10
                ]
              ];
        }
        var _tok$1 = _menhir_env[/* _menhir_token */2];
        var exit$1 = 0;
        if (typeof _tok$1 === "number" && _tok$1 === 3) {
          var _menhir_env$2 = _menhir_discard(_menhir_env);
          var _v_000 = _menhir_stack[2];
          var _v$2 = /* DPatternTm */Block.__(0, [
              _v_000,
              _v
            ]);
          return _menhir_goto_pat(_menhir_env$2, _menhir_stack[0], _menhir_stack[1], _v$2);
        } else {
          exit$1 = 1;
        }
        if (exit$1 === 1) {
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    1458,
                    12
                  ]
                ];
          }
          _menhir_env[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    default:
      return _menhir_fail(/* () */0);
  }
}

function _menhir_goto_core(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    var exit = 0;
    switch (_menhir_s) {
      case 1 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    888,
                    10
                  ]
                ];
          }
          var _tok = _menhir_env[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok === "number" && _tok === 3) {
            var _menhir_env$1 = _menhir_discard(_menhir_env);
            var match = _menhir_stack[0];
            var _v_000 = _menhir_stack[2];
            var _v$1 = /* Lam */Block.__(3, [
                _v_000,
                _v
              ]);
            __v = _v$1;
            __menhir_s = match[1];
            __menhir_stack = match[0];
            __menhir_env = _menhir_env$1;
            continue ;
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      925,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 3 : 
          var _menhir_s$1 = _menhir_stack[1];
          var _menhir_stack$2 = _menhir_stack[0];
          var _v_000$1 = _menhir_stack[2];
          var _v$2 = /* tuple */[
            _v_000$1,
            _v
          ];
          var _menhir_stack$3 = /* tuple */[
            _menhir_stack$2,
            _menhir_s$1,
            _v$2
          ];
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    841,
                    10
                  ]
                ];
          }
          var _tok$1 = _menhir_env[/* _menhir_token */2];
          var exit$2 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 1 : 
                  var _menhir_env$2 = _menhir_discard(_menhir_env);
                  var _tok$2 = _menhir_env$2[/* _menhir_token */2];
                  if (typeof _tok$2 === "number") {
                    switch (_tok$2) {
                      case 0 : 
                          return _menhir_run48(_menhir_env$2, _menhir_stack$3, /* MenhirState68 */2);
                      case 11 : 
                          return _menhir_run53(_menhir_env$2, _menhir_stack$3, /* MenhirState68 */2);
                      default:
                        if (_menhir_env$2[/* _menhir_error */3]) {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                /* tuple */[
                                  "dynamicsParser.ml",
                                  861,
                                  16
                                ]
                              ];
                        }
                        _menhir_env$2[/* _menhir_error */3] = true;
                        return _menhir_errorcase(_menhir_env$2, _menhir_stack$3, /* MenhirState68 */2);
                    }
                  } else {
                    switch (_tok$2.tag | 0) {
                      case 0 : 
                          return _menhir_run49(_menhir_env$2, _menhir_stack$3, /* MenhirState68 */2, _tok$2[0]);
                      case 1 : 
                          return _menhir_run50(_menhir_env$2, _menhir_stack$3, /* MenhirState68 */2, _tok$2[0]);
                      case 2 : 
                          return _menhir_run51(_menhir_env$2, _menhir_stack$3, /* MenhirState68 */2, _tok$2[0]);
                      
                    }
                  }
              case 2 : 
                  exit$2 = 2;
                  break;
              case 3 : 
                  var _v$3 = /* :: */[
                    _v$2,
                    /* [] */0
                  ];
                  var _menhir_env$3 = _menhir_env;
                  var __menhir_stack$1 = _menhir_stack$2;
                  var __menhir_s$1 = _menhir_s$1;
                  var __v$1 = _v$3;
                  while(true) {
                    var _v$4 = __v$1;
                    var _menhir_s$2 = __menhir_s$1;
                    var _menhir_stack$4 = __menhir_stack$1;
                    if (_menhir_s$2 !== 2) {
                      if (_menhir_s$2 !== 6) {
                        return _menhir_fail(/* () */0);
                      } else {
                        return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_case__(_menhir_env$3, _menhir_stack$4, _menhir_s$2, _v$4);
                      }
                    } else {
                      var _v_000$2 = _menhir_stack$4[2];
                      var _v$5 = /* :: */[
                        _v_000$2,
                        _v$4
                      ];
                      __v$1 = _v$5;
                      __menhir_s$1 = _menhir_stack$4[1];
                      __menhir_stack$1 = _menhir_stack$4[0];
                      continue ;
                    }
                  };
              default:
                exit$2 = 2;
            }
          } else {
            exit$2 = 2;
          }
          if (exit$2 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      875,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$2, _menhir_s$1);
          }
          break;
      case 7 : 
      case 8 : 
          exit = 1;
          break;
      case 9 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    622,
                    10
                  ]
                ];
          }
          var _tok$3 = _menhir_env[/* _menhir_token */2];
          var exit$3 = 0;
          if (typeof _tok$3 === "number") {
            switch (_tok$3) {
              case 1 : 
                  var _menhir_env$4 = _menhir_discard(_menhir_env);
                  var _tok$4 = _menhir_env$4[/* _menhir_token */2];
                  var exit$4 = 0;
                  if (typeof _tok$4 === "number") {
                    switch (_tok$4) {
                      case 6 : 
                          return _menhir_run27(_menhir_env$4, _menhir_stack$1, /* MenhirState39 */8);
                      case 7 : 
                          return _menhir_run30(_menhir_env$4, _menhir_stack$1, /* MenhirState39 */8);
                      case 12 : 
                          return _menhir_run33(_menhir_env$4, _menhir_stack$1, /* MenhirState39 */8);
                      case 13 : 
                          return _menhir_run36(_menhir_env$4, _menhir_stack$1, /* MenhirState39 */8);
                      default:
                        exit$4 = 3;
                    }
                  } else if (_tok$4.tag === 2) {
                    return _menhir_run35(_menhir_env$4, _menhir_stack$1, /* MenhirState39 */8, _tok$4[0]);
                  } else {
                    exit$4 = 3;
                  }
                  if (exit$4 === 3) {
                    if (_menhir_env$4[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "dynamicsParser.ml",
                              678,
                              16
                            ]
                          ];
                    }
                    _menhir_env$4[/* _menhir_error */3] = true;
                    return _menhir_errorcase(_menhir_env$4, _menhir_stack$1, /* MenhirState39 */8);
                  }
                  break;
              case 2 : 
                  exit$3 = 2;
                  break;
              case 3 : 
                  var _menhir_env$5 = _menhir_discard(_menhir_env);
                  var _v$6 = /* CoreApp */Block.__(2, [
                      _v,
                      /* [] */0
                    ]);
                  __v = _v$6;
                  __menhir_s = _menhir_stack[1];
                  __menhir_stack = _menhir_stack[0];
                  __menhir_env = _menhir_env$5;
                  continue ;
              default:
                exit$3 = 2;
            }
          } else {
            exit$3 = 2;
          }
          if (exit$3 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      682,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 10 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    762,
                    10
                  ]
                ];
          }
          var _tok$5 = _menhir_env[/* _menhir_token */2];
          var exit$5 = 0;
          if (typeof _tok$5 === "number" && _tok$5 === 1) {
            var _menhir_env$6 = _menhir_discard(_menhir_env);
            var _tok$6 = _menhir_env$6[/* _menhir_token */2];
            if (typeof _tok$6 === "number") {
              switch (_tok$6) {
                case 0 : 
                    return _menhir_run48(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6);
                case 3 : 
                    return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_case__(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6, /* [] */0);
                case 11 : 
                    return _menhir_run53(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6);
                default:
                  if (_menhir_env$6[/* _menhir_error */3]) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "dynamicsParser.ml",
                            796,
                            16
                          ]
                        ];
                  }
                  _menhir_env$6[/* _menhir_error */3] = true;
                  return _menhir_errorcase(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6);
              }
            } else {
              switch (_tok$6.tag | 0) {
                case 0 : 
                    return _menhir_run49(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6, _tok$6[0]);
                case 1 : 
                    return _menhir_run50(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6, _tok$6[0]);
                case 2 : 
                    return _menhir_run51(_menhir_env$6, _menhir_stack$1, /* MenhirState47 */6, _tok$6[0]);
                
              }
            }
          } else {
            exit$5 = 2;
          }
          if (exit$5 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      800,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 11 : 
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    942,
                    10
                  ]
                ];
          }
          var _tok$7 = _menhir_env[/* _menhir_token */2];
          var exit$6 = 0;
          if (typeof _tok$7 === "number" && _tok$7 === 3) {
            var _menhir_env$7 = _menhir_discard(_menhir_env);
            var _v$7 = /* Lam */Block.__(3, [
                /* [] */0,
                _v
              ]);
            __v = _v$7;
            __menhir_s = _menhir_stack[1];
            __menhir_stack = _menhir_stack[0];
            __menhir_env = _menhir_env$7;
            continue ;
          } else {
            exit$6 = 2;
          }
          if (exit$6 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      978,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
          }
          break;
      case 12 : 
          var match$1 = _menhir_stack[0];
          var _v_000$3 = _menhir_stack[2];
          var _v$8 = /* tuple */[
            _v_000$3,
            _v
          ];
          var _menhir_stack_000 = match$1[0];
          var _menhir_stack_001 = match$1[1];
          var _menhir_stack$5 = /* tuple */[
            _menhir_stack_000,
            _menhir_stack_001,
            _v$8
          ];
          if (_menhir_env[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "dynamicsParser.ml",
                    1045,
                    10
                  ]
                ];
          }
          var _tok$8 = _menhir_env[/* _menhir_token */2];
          var exit$7 = 0;
          if (typeof _tok$8 === "number") {
            if (_tok$8 !== 6) {
              if (_tok$8 !== 9) {
                exit$7 = 2;
              } else {
                return _menhir_reduce16(_menhir_env, _menhir_stack$5, /* MenhirState79 */0);
              }
            } else {
              return _menhir_run1(_menhir_env, _menhir_stack$5, /* MenhirState79 */0);
            }
          } else {
            exit$7 = 2;
          }
          if (exit$7 === 2) {
            if (_menhir_env[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      1053,
                      12
                    ]
                  ];
            }
            _menhir_env[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env, _menhir_stack$5, /* MenhirState79 */0);
          }
          break;
      case 0 : 
      case 2 : 
      case 4 : 
      case 5 : 
      case 6 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 16 : 
      case 17 : 
      case 18 : 
      case 19 : 
          return _menhir_fail(/* () */0);
      
    }
    if (exit === 1) {
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                699,
                10
              ]
            ];
      }
      var _tok$9 = _menhir_env[/* _menhir_token */2];
      var exit$8 = 0;
      if (typeof _tok$9 === "number") {
        switch (_tok$9) {
          case 1 : 
              var _menhir_env$8 = _menhir_discard(_menhir_env);
              var _tok$10 = _menhir_env$8[/* _menhir_token */2];
              var exit$9 = 0;
              if (typeof _tok$10 === "number") {
                switch (_tok$10) {
                  case 6 : 
                      return _menhir_run27(_menhir_env$8, _menhir_stack$1, /* MenhirState43 */7);
                  case 7 : 
                      return _menhir_run30(_menhir_env$8, _menhir_stack$1, /* MenhirState43 */7);
                  case 12 : 
                      return _menhir_run33(_menhir_env$8, _menhir_stack$1, /* MenhirState43 */7);
                  case 13 : 
                      return _menhir_run36(_menhir_env$8, _menhir_stack$1, /* MenhirState43 */7);
                  default:
                    exit$9 = 3;
                }
              } else if (_tok$10.tag === 2) {
                return _menhir_run35(_menhir_env$8, _menhir_stack$1, /* MenhirState43 */7, _tok$10[0]);
              } else {
                exit$9 = 3;
              }
              if (exit$9 === 3) {
                if (_menhir_env$8[/* _menhir_error */3]) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "dynamicsParser.ml",
                          723,
                          16
                        ]
                      ];
                }
                _menhir_env$8[/* _menhir_error */3] = true;
                return _menhir_errorcase(_menhir_env$8, _menhir_stack$1, /* MenhirState43 */7);
              }
              break;
          case 2 : 
              exit$8 = 2;
              break;
          case 3 : 
              var _v$9 = /* :: */[
                _v,
                /* [] */0
              ];
              var _menhir_env$9 = _menhir_env;
              var __menhir_stack$2 = _menhir_stack;
              var __menhir_s$2 = _menhir_s;
              var __v$2 = _v$9;
              while(true) {
                var _v$10 = __v$2;
                var _menhir_s$3 = __menhir_s$2;
                var _menhir_stack$6 = __menhir_stack$2;
                if (_menhir_s$3 !== 7) {
                  if (_menhir_s$3 !== 8) {
                    return _menhir_fail(/* () */0);
                  } else {
                    if (_menhir_env$9[/* _menhir_error */3]) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "dynamicsParser.ml",
                              532,
                              10
                            ]
                          ];
                    }
                    var _tok$11 = _menhir_env$9[/* _menhir_token */2];
                    var exit$10 = 0;
                    if (typeof _tok$11 === "number" && _tok$11 === 3) {
                      var _menhir_env$10 = _menhir_discard(_menhir_env$9);
                      var match$2 = _menhir_stack$6[0];
                      var _v_000$4 = _menhir_stack$6[2];
                      var _v$11 = /* CoreApp */Block.__(2, [
                          _v_000$4,
                          _v$10
                        ]);
                      return _menhir_goto_core(_menhir_env$10, match$2[0], match$2[1], _v$11);
                    } else {
                      exit$10 = 1;
                    }
                    if (exit$10 === 1) {
                      if (_menhir_env$9[/* _menhir_error */3]) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "dynamicsParser.ml",
                                569,
                                12
                              ]
                            ];
                      }
                      _menhir_env$9[/* _menhir_error */3] = true;
                      return _menhir_errorcase(_menhir_env$9, _menhir_stack$6, _menhir_s$3);
                    }
                    
                  }
                } else {
                  var _v_000$5 = _menhir_stack$6[2];
                  var _v$12 = /* :: */[
                    _v_000$5,
                    _v$10
                  ];
                  __v$2 = _v$12;
                  __menhir_s$2 = _menhir_stack$6[1];
                  __menhir_stack$2 = _menhir_stack$6[0];
                  continue ;
                }
              };
          default:
            exit$8 = 2;
        }
      } else {
        exit$8 = 2;
      }
      if (exit$8 === 2) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  745,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
      }
      
    }
    
  };
}

function _menhir_goto_loption_separated_nonempty_list_SEMICOLON_case__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "dynamicsParser.ml",
            314,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok === 3) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var match = _menhir_stack[0];
    var _v_000 = _menhir_stack[2];
    var _v$1 = /* Case */Block.__(4, [
        _v_000,
        /* Ty */0,
        _v
      ]);
    return _menhir_goto_core(_menhir_env$1, match[0], match[1], _v$1);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              356,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_reduce29(_menhir_env, _menhir_stack) {
  var _v = /* DVar */Block.__(1, [_menhir_stack[2]]);
  return _menhir_goto_pat(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v);
}

function _menhir_run4(_menhir_env, _menhir_stack) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 0 : 
          return _menhir_run2(_menhir_env$1, _menhir_stack, /* MenhirState4 */17);
      case 3 : 
          return _menhir_reduce24(_menhir_env$1, _menhir_stack, /* MenhirState4 */17);
      case 10 : 
          return _menhir_reduce18(_menhir_env$1, _menhir_stack, /* MenhirState4 */17);
      case 13 : 
          return _menhir_run9(_menhir_env$1, _menhir_stack, /* MenhirState4 */17);
      default:
        exit = 1;
    }
  } else if (_tok.tag === 2) {
    return _menhir_run5(_menhir_env$1, _menhir_stack, /* MenhirState4 */17, _tok[0]);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              1689,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState4 */17);
  }
  
}

function _menhir_reduce4(_menhir_env, _menhir_stack) {
  var _v = /* CoreVar */Block.__(0, [_menhir_stack[2]]);
  return _menhir_goto_core(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v);
}

function _menhir_run6(__menhir_env, __menhir_stack) {
  while(true) {
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" || _tok.tag !== 2) {
      exit = 1;
    } else {
      var _menhir_stack_002 = _tok[0];
      var _menhir_stack$1 = /* tuple */[
        _menhir_stack,
        /* MenhirState6 */16,
        _menhir_stack_002
      ];
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number" && _tok$1 === 10) {
        __menhir_stack = _menhir_stack$1;
        __menhir_env = _menhir_env$2;
        continue ;
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1496,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack, /* MenhirState6 */16);
      }
      
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1507,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState6 */16);
    }
    
  };
}

function _menhir_goto_prim(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _v$1 = /* PatternLit */Block.__(2, [_v]);
  return _menhir_goto_core_pat(_menhir_env, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run9(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1[/* _menhir_token */2];
    var exit = 0;
    if (typeof _tok === "number" && _tok === 5) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number") {
        switch (_tok$1) {
          case 0 : 
              return _menhir_run2(_menhir_env$2, _menhir_stack$1, /* MenhirState10 */15);
          case 3 : 
              return _menhir_reduce24(_menhir_env$2, _menhir_stack$1, /* MenhirState10 */15);
          case 10 : 
              return _menhir_reduce18(_menhir_env$2, _menhir_stack$1, /* MenhirState10 */15);
          case 13 : 
              __menhir_s = /* MenhirState10 */15;
              __menhir_stack = _menhir_stack$1;
              __menhir_env = _menhir_env$2;
              continue ;
          default:
            exit$1 = 2;
        }
      } else if (_tok$1.tag === 2) {
        return _menhir_run5(_menhir_env$2, _menhir_stack$1, /* MenhirState10 */15, _tok$1[0]);
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "dynamicsParser.ml",
                  1927,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState10 */15);
      }
      
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1931,
                8
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
    }
    
  };
}

function _menhir_reduce18(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    /* [] */0
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "dynamicsParser.ml",
            1707,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok === 10) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok$1 = _menhir_env$1[/* _menhir_token */2];
    var exit$1 = 0;
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case 0 : 
            return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState18 */13);
        case 13 : 
            return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState18 */13);
        default:
          exit$1 = 2;
      }
    } else if (_tok$1.tag === 2) {
      return _menhir_run3(_menhir_env$1, _menhir_stack$1, /* MenhirState18 */13, _tok$1[0]);
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "dynamicsParser.ml",
                1723,
                12
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState18 */13);
    }
    
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              1727,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_run2(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_pat(_menhir_env$1, _menhir_stack, _menhir_s, /* DVar */Block.__(1, [undefined]));
}

function _menhir_reduce24(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_scope_pat__(_menhir_env, _menhir_stack, _menhir_s, /* [] */0);
}

function _menhir_run5(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 1 : 
      case 3 : 
          return _menhir_reduce29(_menhir_env$1, _menhir_stack$1);
      case 5 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1);
      case 10 : 
          return _menhir_run6(_menhir_env$1, _menhir_stack$1);
      case 0 : 
      case 2 : 
      case 4 : 
      case 6 : 
      case 7 : 
      case 8 : 
      case 9 : 
      case 11 : 
      case 12 : 
      case 13 : 
          exit = 1;
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              1760,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_run3(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok < 6) {
    switch (_tok) {
      case 0 : 
      case 2 : 
          exit = 1;
          break;
      case 1 : 
      case 3 : 
      case 4 : 
          return _menhir_reduce29(_menhir_env$1, _menhir_stack$1);
      case 5 : 
          return _menhir_run4(_menhir_env$1, _menhir_stack$1);
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              1893,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_loption_separated_nonempty_list_SEMICOLON_core_pat__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "dynamicsParser.ml",
            137,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number" && _tok === 3) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _v_000 = _menhir_stack[2];
    var _v$1 = /* PatternTerm */Block.__(0, [
        _v_000,
        _v
      ]);
    return _menhir_goto_core_pat(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              173,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_goto_scope_pat(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "dynamicsParser.ml",
            1330,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    switch (_tok) {
      case 1 : 
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1[/* _menhir_token */2];
          var exit$1 = 0;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case 0 : 
                  return _menhir_run2(_menhir_env$1, _menhir_stack$1, /* MenhirState14 */14);
              case 10 : 
                  return _menhir_reduce18(_menhir_env$1, _menhir_stack$1, /* MenhirState14 */14);
              case 13 : 
                  return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState14 */14);
              default:
                exit$1 = 2;
            }
          } else if (_tok$1.tag === 2) {
            return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState14 */14, _tok$1[0]);
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (_menhir_env$1[/* _menhir_error */3]) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "dynamicsParser.ml",
                      1348,
                      12
                    ]
                  ];
            }
            _menhir_env$1[/* _menhir_error */3] = true;
            return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState14 */14);
          }
          break;
      case 2 : 
          exit = 1;
          break;
      case 3 : 
          var _v$1 = /* :: */[
            _v,
            /* [] */0
          ];
          var _menhir_env$2 = _menhir_env;
          var __menhir_stack = _menhir_stack;
          var __menhir_s = _menhir_s;
          var __v = _v$1;
          while(true) {
            var _v$2 = __v;
            var _menhir_s$1 = __menhir_s;
            var _menhir_stack$2 = __menhir_stack;
            if (_menhir_s$1 >= 14) {
              switch (_menhir_s$1 - 14 | 0) {
                case 0 : 
                    var _v_000 = _menhir_stack$2[2];
                    var _v$3 = /* :: */[
                      _v_000,
                      _v$2
                    ];
                    __v = _v$3;
                    __menhir_s = _menhir_stack$2[1];
                    __menhir_stack = _menhir_stack$2[0];
                    continue ;
                case 1 : 
                case 3 : 
                    return _menhir_goto_loption_separated_nonempty_list_SEMICOLON_scope_pat__(_menhir_env$2, _menhir_stack$2, _menhir_s$1, _v$2);
                case 2 : 
                case 4 : 
                case 5 : 
                    return _menhir_fail(/* () */0);
                
              }
            } else {
              return _menhir_fail(/* () */0);
            }
          };
      default:
        exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              1362,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function dynamics(lexer, lexbuf) {
  var _menhir_env = /* record */[
    /* _menhir_lexer */lexer,
    /* _menhir_lexbuf */lexbuf,
    /* _menhir_token : () */0,
    /* _menhir_error */false
  ];
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 6) {
      if (_tok !== 9) {
        exit = 1;
      } else {
        return _menhir_reduce16(_menhir_env$1, _menhir_stack, /* MenhirState0 */19);
      }
    } else {
      return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState0 */19);
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env$1[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "dynamicsParser.ml",
              2138,
              8
            ]
          ];
    }
    _menhir_env$1[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState0 */19);
  }
  
}

exports.$$Error = $$Error;
exports.dynamics = dynamics;
/* No side effect */
