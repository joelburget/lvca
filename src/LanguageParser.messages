languageDef: ID ASSIGN BAR SEMICOLON
##
## Ends in an error in state: 4.
##
## operatorDefs -> option(BAR) . loption(separated_nonempty_list(BAR,operatorDef)) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## option(BAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE 1>

languageDef: ID ASSIGN ID LEFT_BRACK ID COMMA SEMICOLON
##
## Ends in an error in state: 29.
##
## separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE 2>

languageDef: ID ASSIGN ID LEFT_BRACK ID SEMICOLON
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(COMMA,ID) -> ID . [ RIGHT_BRACK ]
## separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE 3>

languageDef: ID ASSIGN ID LEFT_BRACK RIGHT_BRACK LEFT_PAREN SEMICOLON
##
## Ends in an error in state: 34.
##
## arity -> LEFT_BRACK nameList RIGHT_BRACK LEFT_PAREN . valenceList RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK nameList RIGHT_BRACK LEFT_PAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE 4>

languageDef: ID ASSIGN ID LEFT_BRACK RIGHT_BRACK SEMICOLON
##
## Ends in an error in state: 33.
##
## arity -> LEFT_BRACK nameList RIGHT_BRACK . LEFT_PAREN valenceList RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK nameList RIGHT_BRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE 5>

languageDef: ID ASSIGN ID LEFT_BRACK SEMICOLON
##
## Ends in an error in state: 27.
##
## arity -> LEFT_BRACK . nameList RIGHT_BRACK LEFT_PAREN valenceList RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE 6>

languageDef: ID ASSIGN ID LEFT_PAREN ID DOT SEMICOLON
##
## Ends in an error in state: 21.
##
## fixedValence -> sort DOT . fixedValence [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE 7>

languageDef: ID ASSIGN ID LEFT_PAREN ID ID LEFT_BRACK
##
## Ends in an error in state: 11.
##
## sort -> sort . sort [ SEMICOLON RIGHT_PAREN RIGHT_BRACK LEFT_PAREN ID DOT ]
## sort -> sort sort . [ SEMICOLON RIGHT_PAREN RIGHT_BRACK LEFT_PAREN ID DOT ]
##
## The known suffix of the stack is as follows:
## sort sort
##

<YOUR SYNTAX ERROR MESSAGE HERE 8>

languageDef: ID ASSIGN ID LEFT_PAREN ID ID RIGHT_BRACK
##
## Ends in an error in state: 20.
##
## fixedValence -> sort . DOT fixedValence [ SEMICOLON RIGHT_PAREN ]
## fixedValence -> sort . [ SEMICOLON RIGHT_PAREN ]
## sort -> sort . sort [ SEMICOLON RIGHT_PAREN LEFT_PAREN ID DOT ]
##
## The known suffix of the stack is as follows:
## sort
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production sort -> sort sort
##

<YOUR SYNTAX ERROR MESSAGE HERE 9>

languageDef: ID ASSIGN ID LEFT_PAREN ID LEFT_BRACK ID RIGHT_BRACK RIGHT_BRACK
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(SEMICOLON,valence) -> valence . [ RIGHT_PAREN ]
## separated_nonempty_list(SEMICOLON,valence) -> valence . SEMICOLON separated_nonempty_list(SEMICOLON,valence) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## valence
##

<YOUR SYNTAX ERROR MESSAGE HERE 10>

languageDef: ID ASSIGN ID LEFT_PAREN ID LEFT_BRACK ID SEMICOLON
##
## Ends in an error in state: 14.
##
## sort -> sort . sort [ RIGHT_BRACK LEFT_PAREN ID ]
## valence -> ID LEFT_BRACK sort . RIGHT_BRACK [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ID LEFT_BRACK sort
##

<YOUR SYNTAX ERROR MESSAGE HERE 11>

languageDef: ID ASSIGN ID LEFT_PAREN ID LEFT_BRACK SEMICOLON
##
## Ends in an error in state: 13.
##
## valence -> ID LEFT_BRACK . sort RIGHT_BRACK [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ID LEFT_BRACK
##

<YOUR SYNTAX ERROR MESSAGE HERE 12>

languageDef: ID ASSIGN ID LEFT_PAREN ID RIGHT_BRACK
##
## Ends in an error in state: 12.
##
## sort -> ID . [ SEMICOLON RIGHT_PAREN LEFT_PAREN ID DOT ]
## valence -> ID . LEFT_BRACK sort RIGHT_BRACK [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE 13>

languageDef: ID ASSIGN ID LEFT_PAREN ID SEMICOLON SEMICOLON
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(SEMICOLON,valence) -> valence SEMICOLON . separated_nonempty_list(SEMICOLON,valence) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## valence SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE 14>

languageDef: ID ASSIGN ID LEFT_PAREN LEFT_PAREN ID SEMICOLON
##
## Ends in an error in state: 9.
##
## sort -> LEFT_PAREN sort . RIGHT_PAREN [ SEMICOLON RIGHT_PAREN RIGHT_BRACK LEFT_PAREN ID DOT ]
## sort -> sort . sort [ RIGHT_PAREN LEFT_PAREN ID ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN sort
##

<YOUR SYNTAX ERROR MESSAGE HERE 15>

languageDef: ID ASSIGN ID LEFT_PAREN LEFT_PAREN SEMICOLON
##
## Ends in an error in state: 7.
##
## sort -> LEFT_PAREN . sort RIGHT_PAREN [ SEMICOLON RIGHT_PAREN RIGHT_BRACK LEFT_PAREN ID DOT ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE 16>

languageDef: ID ASSIGN ID LEFT_PAREN RIGHT_PAREN BAR SEMICOLON
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(BAR,operatorDef) -> operatorDef BAR . separated_nonempty_list(BAR,operatorDef) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## operatorDef BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE 17>

languageDef: ID ASSIGN ID LEFT_PAREN RIGHT_PAREN SEMICOLON
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(BAR,operatorDef) -> operatorDef . [ ID EOF ]
## separated_nonempty_list(BAR,operatorDef) -> operatorDef . BAR separated_nonempty_list(BAR,operatorDef) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## operatorDef
##

<YOUR SYNTAX ERROR MESSAGE HERE 18>

languageDef: ID ASSIGN ID LEFT_PAREN SEMICOLON
##
## Ends in an error in state: 6.
##
## arity -> LEFT_PAREN . valenceList RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE 19>

languageDef: ID ASSIGN ID SEMICOLON
##
## Ends in an error in state: 5.
##
## operatorDef -> ID . arity [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE 20>

languageDef: ID ASSIGN SEMICOLON
##
## Ends in an error in state: 2.
##
## sortDef -> ID ASSIGN . operatorDefs [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE 21>

languageDef: ID SEMICOLON
##
## Ends in an error in state: 1.
##
## sortDef -> ID . ASSIGN operatorDefs [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE 22>

languageDef: SEMICOLON
##
## Ends in an error in state: 0.
##
## languageDef' -> . languageDef [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE 23>

