# 1 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
 
open Regex_Parser
open LexerUtil

module L = Lexing
module B = Buffer

# 10 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\243\255\244\255\245\255\246\255\247\255\248\255\249\255\
    \250\255\251\255\252\255\025\000\081\000\253\255\254\255\001\000\
    \251\255\252\255\253\255\003\000\034\000\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\012\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\255\255\000\000\000\000\019\000\
    \000\000\000\000\000\000\019\000\019\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\016\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\009\000\006\000\005\000\255\255\012\000\003\000\000\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\008\000\011\000\020\000\018\000\012\000\
    \255\255\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\014\000\007\000\014\000\012\000\021\000\
    \000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\000\000\014\000\000\000\000\000\000\000\
    \014\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\
    \012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\017\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\015\000\255\255\019\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\015\000\015\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\000\000\011\000\012\000\020\000\
    \255\255\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\255\255\011\000\255\255\255\255\255\255\
    \011\000\255\255\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\255\255\255\255\255\255\255\255\
    \012\000\255\255\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\015\000\255\255\019\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\011\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\020\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 15 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
          ( CHARS (L.lexeme lexbuf) )
# 133 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 1 ->
# 16 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
               ( CHARACTER_CLASS (L.lexeme lexbuf) )
# 138 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 2 ->
# 17 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
            ( ESCAPED (L.lexeme lexbuf) )
# 143 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 3 ->
# 18 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( LEFT_PAREN )
# 148 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 4 ->
# 19 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( RIGHT_PAREN )
# 153 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 5 ->
# 20 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( read_character_set (Buffer.create 17) lexbuf )
# 158 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 6 ->
# 21 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( BAR )
# 163 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 7 ->
# 22 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( STAR )
# 168 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 8 ->
# 23 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( PLUS )
# 173 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 9 ->
# 24 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( QUESTION )
# 178 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 10 ->
# 25 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( DOT )
# 183 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 11 ->
# 26 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( EOF )
# 188 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 12 ->
# 27 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( error lexbuf ("Unexpected char: " ^ L.lexeme lexbuf) )
# 193 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_character_set buf lexbuf =
   __ocaml_lex_read_character_set_rec buf lexbuf 15
and __ocaml_lex_read_character_set_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 31 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
    ( B.add_string buf @@ L.lexeme lexbuf
    ; read_character_set buf lexbuf
    )
# 207 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 1 ->
# 34 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
              ( B.add_char buf ']'
              ; read_character_set buf lexbuf
              )
# 214 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 2 ->
# 37 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( CHARACTER_SET (B.contents buf) )
# 219 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 3 ->
# 38 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( error lexbuf "end of input inside of a character set" )
# 224 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | 4 ->
# 39 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.mll"
        ( error lexbuf
          "found '%s' - don't know how to handle" @@ L.lexeme lexbuf )
# 230 "/Users/joel/code/lvca-bucklescript/src/Regex_Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_character_set_rec buf lexbuf __ocaml_lex_state

;;

