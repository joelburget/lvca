language_def: ID ASSIGN BAR STRING
##
## Ends in an error in state: 66.
##
## sort_def -> ID ASSIGN option(BAR) . separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID ASSIGN option(BAR)
##

Malformed sort declaration -- expected an operator, eg `add(arith; arith)`

language_def: ID ASSIGN ID LEFT_BRACK ID COMMA STRING
##
## Ends in an error in state: 52.
##
## separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## ID COMMA
##

Expected a comma-separated list of ids.

language_def: ID ASSIGN ID LEFT_BRACK ID STRING
##
## Ends in an error in state: 51.
##
## separated_nonempty_list(COMMA,ID) -> ID . [ RIGHT_BRACK ]
## separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ RIGHT_BRACK ]
##
## The known suffix of the stack is as follows:
## ID
##

Expected a comma-separated list of ids, followed by "]".

language_def: ID ASSIGN ID LEFT_BRACK RIGHT_BRACK LEFT_PAREN STRING
##
## Ends in an error in state: 57.
##
## arity -> LEFT_BRACK loption(separated_nonempty_list(COMMA,ID)) RIGHT_BRACK LEFT_PAREN . valence_list RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK loption(separated_nonempty_list(COMMA,ID)) RIGHT_BRACK LEFT_PAREN
##

Expected a valence when parsing an arity.

language_def: ID ASSIGN ID LEFT_BRACK RIGHT_BRACK STRING
##
## Ends in an error in state: 56.
##
## arity -> LEFT_BRACK loption(separated_nonempty_list(COMMA,ID)) RIGHT_BRACK . LEFT_PAREN valence_list RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK loption(separated_nonempty_list(COMMA,ID)) RIGHT_BRACK
##

Expected a paren-enclosed list of valences when parsing an arity.

language_def: ID ASSIGN ID LEFT_BRACK STRING
##
## Ends in an error in state: 50.
##
## arity -> LEFT_BRACK . loption(separated_nonempty_list(COMMA,ID)) RIGHT_BRACK LEFT_PAREN valence_list RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACK
##

Identifier expected or "]" expected.

language_def: ID ASSIGN ID LEFT_PAREN ID DOT STRING
##
## Ends in an error in state: 43.
##
## separated_nonempty_list(DOT,sort) -> sort DOT . separated_nonempty_list(DOT,sort) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort DOT
##

Malformed list of sorts.

language_def: ID ASSIGN ID LEFT_PAREN ID DOT ID STAR
##
## Ends in an error in state: 44.
##
## separated_nonempty_list(DOT,sort) -> sort . [ SEMICOLON RIGHT_PAREN ]
## separated_nonempty_list(DOT,sort) -> sort . DOT separated_nonempty_list(DOT,sort) [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 27, spurious reduction of production sort -> ID
##

Expected a `.` or `;` separating sorts.

language_def: ID ASSIGN ID LEFT_PAREN ID LEFT_PAREN ID SEMICOLON STRING
##
## Ends in an error in state: 30.
##
## separated_nonempty_list(SEMICOLON,sort) -> sort SEMICOLON . separated_nonempty_list(SEMICOLON,sort) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort SEMICOLON
##

Expected a `;`-separated list of sorts.

language_def: ID ASSIGN ID LEFT_PAREN ID LEFT_PAREN ID STAR
##
## Ends in an error in state: 29.
##
## separated_nonempty_list(SEMICOLON,sort) -> sort . [ RIGHT_PAREN ]
## separated_nonempty_list(SEMICOLON,sort) -> sort . SEMICOLON separated_nonempty_list(SEMICOLON,sort) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 27, spurious reduction of production sort -> ID
##

As part of a list of sorts, expected `(` or `;`.

language_def: ID ASSIGN ID LEFT_PAREN ID LEFT_PAREN RIGHT_PAREN STRING
##
## Ends in an error in state: 39.
##
## separated_nonempty_list(DOT,sort) -> sort . [ SEMICOLON RIGHT_PAREN ]
## separated_nonempty_list(DOT,sort) -> sort . DOT separated_nonempty_list(DOT,sort) [ SEMICOLON RIGHT_PAREN ]
## valence -> sort . STAR DOT sort [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort
##

As part of a list of sorts, expected `;` or `.`.

language_def: ID ASSIGN ID LEFT_PAREN ID LEFT_PAREN STRING
##
## Ends in an error in state: 28.
##
## sort -> ID LEFT_PAREN . loption(separated_nonempty_list(SEMICOLON,sort)) RIGHT_PAREN [ STAR SEMICOLON RIGHT_PAREN DOT ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN
##

After `(`, expected a (possibly empty) list of sorts.

language_def: ID ASSIGN ID LEFT_PAREN ID SEMICOLON STRING
##
## Ends in an error in state: 38.
##
## separated_nonempty_list(SEMICOLON,valence) -> valence SEMICOLON . separated_nonempty_list(SEMICOLON,valence) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## valence SEMICOLON
##

Malformed valence list. Expected a valence or list terminator.

language_def: ID ASSIGN ID LEFT_PAREN ID STAR DOT ID STAR
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(SEMICOLON,valence) -> valence . [ RIGHT_PAREN ]
## separated_nonempty_list(SEMICOLON,valence) -> valence . SEMICOLON separated_nonempty_list(SEMICOLON,valence) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## valence
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 27, spurious reduction of production sort -> ID
## In state 42, spurious reduction of production valence -> sort STAR DOT sort
##

As part of a valence list, expected `(` or `;`.

language_def: ID ASSIGN ID LEFT_PAREN ID STAR DOT STRING
##
## Ends in an error in state: 41.
##
## valence -> sort STAR DOT . sort [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort STAR DOT
##

Parsing a valence, after `*.`, expected a sort`.

language_def: ID ASSIGN ID LEFT_PAREN ID STAR STRING
##
## Ends in an error in state: 40.
##
## valence -> sort STAR . DOT sort [ SEMICOLON RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## sort STAR
##

Parsing a valence, after `*`, expected `.`.

language_def: ID LEFT_PAREN ID SEMICOLON STRING
##
## Ends in an error in state: 17.
##
## separated_nonempty_list(SEMICOLON,ID) -> ID SEMICOLON . separated_nonempty_list(SEMICOLON,ID) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ID SEMICOLON
##

Unexpected token in `;`-separated identifier list.

language_def: ID LEFT_PAREN ID STRING
##
## Ends in an error in state: 16.
##
## separated_nonempty_list(SEMICOLON,ID) -> ID . [ RIGHT_PAREN ]
## separated_nonempty_list(SEMICOLON,ID) -> ID . SEMICOLON separated_nonempty_list(SEMICOLON,ID) [ RIGHT_PAREN ]
##
## The known suffix of the stack is as follows:
## ID
##

Unexpected token in `;`-separated identifier list.

language_def: ID LEFT_PAREN RIGHT_PAREN ASSIGN BAR STRING
##
## Ends in an error in state: 24.
##
## sort_def -> ID LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN ASSIGN option(BAR) . separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN ASSIGN option(BAR)
##

Unexpected token in sort definition. Expected an operator definition.

language_def: ID LEFT_PAREN RIGHT_PAREN ASSIGN STRING
##
## Ends in an error in state: 22.
##
## sort_def -> ID LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN ASSIGN . option(BAR) separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN ASSIGN
##

Unexpected token in sort definition. Expected an operator definition.

language_def: ID LEFT_PAREN RIGHT_PAREN STRING
##
## Ends in an error in state: 21.
##
## sort_def -> ID LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN . ASSIGN option(BAR) separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN
##

Unexpected token in sort definition. Expected `:=`.

language_def: ID LEFT_PAREN STRING
##
## Ends in an error in state: 15.
##
## sort_def -> ID LEFT_PAREN . loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN ASSIGN option(BAR) separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID LEFT_PAREN
##

Unexpected token in sort definition variable list.

language_def: ID ASSIGN ID LEFT_PAREN ID STRING
##
## Ends in an error in state: 27.
##
## sort -> ID . LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,sort)) RIGHT_PAREN [ STAR SEMICOLON RIGHT_PAREN DOT ]
## sort -> ID . [ STAR SEMICOLON RIGHT_PAREN DOT ]
##
## The known suffix of the stack is as follows:
## ID
##

Unexpected "]".

language_def: ID ASSIGN ID LEFT_PAREN RIGHT_PAREN BAR STRING
##
## Ends in an error in state: 63.
##
## separated_nonempty_list(BAR,operator_def) -> operator_def BAR . separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## operator_def BAR
##

Malformed list of operator definitions. Expected an operator definition.

language_def: ID ASSIGN ID LEFT_PAREN RIGHT_PAREN STRING
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(BAR,operator_def) -> operator_def . [ ID EOF ]
## separated_nonempty_list(BAR,operator_def) -> operator_def . BAR separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## operator_def
##

Malformed list of operator definitions. Expected an identifier, "|", or EOF.

language_def: ID ASSIGN ID LEFT_PAREN STRING
##
## Ends in an error in state: 26.
##
## arity -> LEFT_PAREN . valence_list RIGHT_PAREN [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## LEFT_PAREN
##

Malformed arity. Expected a list of valences.

language_def: ID ASSIGN ID STRING
##
## Ends in an error in state: 25.
##
## operator_def -> ID . arity [ ID EOF BAR ]
##
## The known suffix of the stack is as follows:
## ID
##

Malformed operator definition. Expected an arity.

language_def: ID ASSIGN STRING
##
## Ends in an error in state: 65.
##
## sort_def -> ID ASSIGN . option(BAR) separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID ASSIGN
##

Expected a "|"-separated list of operator definitions.

language_def: ID STRING
##
## Ends in an error in state: 14.
##
## sort_def -> ID . ASSIGN option(BAR) separated_nonempty_list(BAR,operator_def) [ ID EOF ]
## sort_def -> ID . LEFT_PAREN loption(separated_nonempty_list(SEMICOLON,ID)) RIGHT_PAREN ASSIGN option(BAR) separated_nonempty_list(BAR,operator_def) [ ID EOF ]
##
## The known suffix of the stack is as follows:
## ID
##

Expected a sort declaration.

language_def: IMPORT LEFT_BRACE ID AS ID STRING
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,import_symbol) -> import_symbol . [ RIGHT_BRACE ]
## separated_nonempty_list(COMMA,import_symbol) -> import_symbol . COMMA separated_nonempty_list(COMMA,import_symbol) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## import_symbol
##

Expected a comma-separated list of symbols to import.

language_def: IMPORT LEFT_BRACE ID AS STRING
##
## Ends in an error in state: 4.
##
## import_symbol -> ID AS . ID [ RIGHT_BRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID AS
##

Expected an identifier after "as".

language_def: IMPORT LEFT_BRACE ID COMMA STRING
##
## Ends in an error in state: 11.
##
## separated_nonempty_list(COMMA,import_symbol) -> import_symbol COMMA . separated_nonempty_list(COMMA,import_symbol) [ RIGHT_BRACE ]
##
## The known suffix of the stack is as follows:
## import_symbol COMMA
##

Expected a list of symbols to import.

language_def: IMPORT LEFT_BRACE ID RIGHT_BRACE FROM SEMICOLON
##
## Ends in an error in state: 8.
##
## import -> IMPORT LEFT_BRACE separated_nonempty_list(COMMA,import_symbol) RIGHT_BRACE FROM . STRING [ IMPORT ID ]
##
## The known suffix of the stack is as follows:
## IMPORT LEFT_BRACE separated_nonempty_list(COMMA,import_symbol) RIGHT_BRACE FROM
##

Malformed import -- expected a string after "from".

language_def: IMPORT LEFT_BRACE ID RIGHT_BRACE FROM STRING STRING
##
## Ends in an error in state: 73.
##
## list(import) -> import . list(import) [ ID ]
##
## The known suffix of the stack is as follows:
## import
##

Malformed import list -- expected another import or the first sort declaration.

language_def: IMPORT LEFT_BRACE ID RIGHT_BRACE STRING
##
## Ends in an error in state: 7.
##
## import -> IMPORT LEFT_BRACE separated_nonempty_list(COMMA,import_symbol) RIGHT_BRACE . FROM STRING [ IMPORT ID ]
##
## The known suffix of the stack is as follows:
## IMPORT LEFT_BRACE separated_nonempty_list(COMMA,import_symbol) RIGHT_BRACE
##

Malformed import -- expected "from".

language_def: IMPORT LEFT_BRACE ID STRING
##
## Ends in an error in state: 3.
##
## import_symbol -> ID . [ RIGHT_BRACE COMMA ]
## import_symbol -> ID . AS ID [ RIGHT_BRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

Comma-separated list of import symbols (followed by a "}") expected.

language_def: IMPORT LEFT_BRACE STRING
##
## Ends in an error in state: 2.
##
## import -> IMPORT LEFT_BRACE . separated_nonempty_list(COMMA,import_symbol) RIGHT_BRACE FROM STRING [ IMPORT ID ]
##
## The known suffix of the stack is as follows:
## IMPORT LEFT_BRACE
##

Malformed import -- expected an identifier list.

language_def: IMPORT STRING
##
## Ends in an error in state: 1.
##
## import -> IMPORT . LEFT_BRACE separated_nonempty_list(COMMA,import_symbol) RIGHT_BRACE FROM STRING [ IMPORT ID ]
##
## The known suffix of the stack is as follows:
## IMPORT
##

Malformed import -- expected a set of identifiers, eg "{list, string}".

language_def: STRING
##
## Ends in an error in state: 0.
##
## language_def' -> . language_def [ # ]
##
## The known suffix of the stack is as follows:
##
##

Malformed language definition. Expected a set of sort definitions.

